/*
 * File: app/controller/MainViewController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MainViewController', {
    extend: 'Ext.app.Controller',

    config: {
        createdPolyLines: [
            
        ],
        views: [
            'MainViewContainer'
        ],

        refs: {
            streetParkingPanel: '#StreetParkingPanel',
            timeSlider: '#TimeSlider',
            mainViewContainer: '#MainViewContainer',
            bottomToolBar: '#BottomToolBar',
            backButton: '#BackButton',
            daySelectorButton: '#DaySelectorButton',
            searchLocationField: '#SearchLocationField',
            myMap: '#MyMap',
            weekDay: '#Weekday',
            dayTypeSelectorField: '#DayTypeSelectorField',
            weekEnd: '#Weekend',
            timePicker: '#TimePicker',
            timePickerPanel: '#TimePickerPanel',
            hourDurationPicker: '#HourDurationPicker',
            minuteDurationPicker: '#MinuteDurationPicker',
            titleToolBar: '#TitleToolBar',
            doneButton: '#Done',
            realTimeButton: '#RealTime',
            amPMPickerSlot: '#AMPMPickerSlot',
            durationSelector: '#DurationSelector',
            refreshButton: '#RefreshButton',
            toolTip: '#ToolTip',
            dayLabel: '#DayLabel',
            timeLabel: '#TimeLabel',
            parkDurationPanel: '#ParkDurationPanel',
            payButton: '#PayButton',
            cancelButton: '#CancelButton',
            durationPicker: '#DurationPicker',
            amountTextField: '#AmountTextField'
        },

        control: {
            "[action=currentLocationButton]": {
                tap: 'onCurrentLocationTap'
            },
            "[action=searchLocationButtonEvent]": {
                tap: 'onSearchLocationTap'
            },
            "[action=backButtonEvent]": {
                tap: 'onBackButtonTap'
            },
            "[action=onTimeButtonTap]": {
                tap: 'onTimeButtonTap'
            },
            "[action=onDoneButtonTap]": {
                tap: 'onDoneButtonTap'
            },
            "[action=onRealTimeButtonTap]": {
                tap: 'onRealTimeButtonTap'
            },
            "[action=onTimeSliderButtonTap]": {
                tap: 'onSliderButtonTap'
            },
            "[action=onRefreshTapEvent]": {
                tap: 'onRefreshTap'
            },
            "sliderfield": {
                dragend: 'onSliderfieldDragEnd',
                drag: 'onSliderfieldDrag'
            },
            "[action=onPayButtonScreenTap]": {
                tap: 'onPayButtonScreenTap'
            },
            "pickerslot": {
                slotpick: 'onPickerslotSlotpick'
            }
        }
    },

    onCurrentLocationTap: function(button, e, eOpts) {
        var senchaGoogleMap = this.getMyMap();
        senchaGoogleMap.setUseCurrentLocation(true);
    },

    onSearchLocationTap: function(button, e, eOpts) {
        var activeId = Ext.getCmp('MainViewContainer').getActiveItem().getId();
        if(activeId === 'SearchLocationPanel'){

            var start = MyApp.app.getController('MainViewController').config.globalFromCoordinates;
            var end = MyApp.app.getController('MainViewController').config.globalToCoordinates;

            this.addDirections(start,end);
            this.changeView(0); 
        } else {
            this.changeView(1);
        }

    },

    onBackButtonTap: function(button, e, eOpts) {
        this.changeView(0);
    },

    onTimeButtonTap: function(button, e, eOpts) {
        var timePickerPanel = this.getTimePickerPanel();

        if(timePickerPanel.isHidden()){
            this.getTimePickerPanel().showBy(button);
        } else {
            this.getTimePickerPanel().setHidden(true);
        }
    },

    onDoneButtonTap: function(button, e, eOpts) {
        var timePickerPanel = this.getTimePickerPanel();



        var dayType = this.getDayTypeSelectorField().getValue();
        var duration = this.getDurationSelector().getValue();

        //10:30 AM converting to 24Hour Time.
        var timePickerValues = this.getTimePicker().getValues();
        var min;
        var hour;
        var ampm;



        if(timePickerValues){
            min = timePickerValues.MinutePickerSlot;
            hour = timePickerValues.HourPickerSlot;
            ampm = timePickerValues.AMPMPickerSlot;
        }



        var timeString = hour + ":" + min +" "+ampm;
        var startTimeDate = this.convertTo24HourTime(timeString);

        //SET global PEReport
        peRep = Ext.create('MyApp.model.PEReport', startTimeDate);    


        //Set Duration
        if(duration===0){
            peRep.set('minEndHour','0');
            peRep.set('minEndMinute','0');
        } else {
            var endTime = new Date(startTimeDate.getTime() + duration*60000);
            peRep.set('endTime',endTime);
            peRep.set('minEndHour',endTime.getHours());
            peRep.set('minEndMinute',endTime.getMinutes());

        }
        peRep.set('mode','OFFLINE');

        if(!timePickerPanel.isHidden()){
            this.getTimePickerPanel().setHidden(true);
        } 

        MyApp.app.getController('MainViewController').config.globalPeReport = peRep;
        this.refreshMap();
    },

    onRealTimeButtonTap: function(button, e, eOpts) {

    },

    onSliderButtonTap: function(button, e, eOpts) {
        var timeSlider = this.getTimeSlider();
        var toolTip = this.getToolTip();

        if(timeSlider.isHidden()){
            Ext.getCmp('SliderButton').setIconCls('arrow_up');
            timeSlider.setHidden(false);
        } else {
            Ext.getCmp('SliderButton').setIconCls('arrow_down');
            timeSlider.setHidden(true);
            toolTip.setHidden(true);
        }

    },

    onRefreshTap: function(button, e, eOpts) {
        this.getDirectionsRenderer().setMap(null);
        this.getTrafficLayer().setMap(null);
    },

    onSliderfieldDragEnd: function(sliderfield, sl, thumb, value, e, eOpts) {
        var tooltip = this.getToolTip();
        var dayLabel = this.getDayLabel();
        var timeLabel = this.getTimeLabel();



        var now = new Date();
        var sliderValue = sliderfield.getValue();
        var changeMins = 5 * sliderValue;
        var changeMilli = changeMins * 60000;
        var totalTime = now.getTime() + changeMilli;
        now.setTime(totalTime);



        tooltip.hide();
        createGlobalPEReport(now);
        MyApp.app.getController('MainViewController').refreshMap();




        function createGlobalPEReport(currentSliderTime){

            var startTimeDate = currentSliderTime;

            //SET global PEReport
            peRep = Ext.create('MyApp.model.PEReport', startTimeDate);    


            //Set Duration
            /* Used to have duration before when calculating the total cost of parking, currently we do not include that in the PEReport*/ 
            var duration = 0;    
            if(duration===0){
                peRep.set('minEndHour','0');
                peRep.set('minEndMinute','0');
            } else {
                var endTime = new Date(startTimeDate.getTime() + duration*60000);
                peRep.set('endTime',endTime);
                peRep.set('minEndHour',endTime.getHours());
                peRep.set('minEndMinute',endTime.getMinutes());

            }

            peRep.set('mode','OFFLINE');
            MyApp.app.getController('MainViewController').config.globalPeReport = peRep;


        }
    },

    onSliderfieldDrag: function(sliderfield, sl, thumb, e, eOpts) {
        var tooltip = this.getToolTip();
        tooltip.setHidden(false);
        var dayLabel = this.getDayLabel();
        var timeLabel = this.getTimeLabel();


        var now = new Date();
        var sliderValue = sliderfield.getValue();
        var changeMins = 5 * sliderValue;
        var changeMilli = changeMins * 60000;
        var totalTime = now.getTime() + changeMilli;
        now.setTime(totalTime);
        var day = this.convertDayIntToString(now.getDay());

        if(sliderValue == 0){
            time = "Current Time";
        } else {
            time = this.convertToTwelveHourTime(now.getHours() + ':' + (5 * Math.floor(now.getMinutes()/5)) +':' +now.getSeconds());
        }



        dayLabel.updateHtml(day);
        timeLabel.updateHtml(time);
        tooltip.showBy(thumb);



    },

    onPayButtonScreenTap: function(button, e, eOpts) {


        var hourDurationPicker = this.getHourDurationPicker();
        var minDurationPicker = this.getMinuteDurationPicker();

        var peRule = Ext.getStore('PERuleDAO').getById(6);
        var cost = peRule.get('cost');


        this.getDurationPicker().cost = cost;

        var timeLimit = peRule.get('timeLimit');

        var timeArray = timeLimit.split(':');

        var peHours = timeArray[0]-0;

        var peMinutes = timeArray[1];


        var hourDataSet = this.createHours(peHours);
        var minDataSet =  this.createMinutes(peMinutes);

        if(!hourDurationPicker.getData()){
            hourDurationPicker.setData(hourDataSet);
        }

        if(!minDurationPicker.getData()){
            minDurationPicker.setData(minDataSet);
        }

        this.changeView(5);



    },

    onPickerslotSlotpick: function(pickerslot, value, node, eOpts) {
        var durationPicker = this.getDurationPicker();
        var cost = durationPicker.cost;


        var hours = durationPicker.getValue()['HourPickerSlot']-0;
        var mins = durationPicker.getValue()['MinutePickerSlot']-0; 

        var amount =(hours * cost) + ((cost/60) * mins);

        this.getAmountTextField().setValue('$'+amount.toFixed(2));
    },

    addMarker: function(name, latitude, longitude, description) {
        var myIcon = {
            url: "http://127.0.0.1/resources/img/parking-meter-export.png"
        };

        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(latitude,longitude),
            icon: myIcon,
            map: this.getActualGoogleMap(),
            clickable: true
        });


        marker.info = new google.maps.InfoWindow({
            content: description 
        });


        new google.maps.event.addListener(marker, 'click', function() {
            marker.info.open(marker.map, marker);
        });



        /* Adding markers to a map 

        ParraCity 
        - http://www.parracity.nsw.gov.au/live/my_home/parking__and__transport/parking
        - http://www.parracity.nsw.gov.au/__data/asset_types/google_map/js/map_lib.js
        http://stackoverflow.com/questions/10132625/google-maps-marker-and-sencha-touch-2


        */


    },

    getActualGoogleMap: function() {
        /*
        this.getMyMap().getMap();
        Not using this, because it has a chance of being called from onload from the datastore 

        */
        return  Ext.getCmp('MyMap').getMap();


    },

    createPolyLines: function(startLat, startLng, endLat, endLng, occupied, peReport, peRules, currentAppliedRule) {
        var startLatLng = new google.maps.LatLng(startLat,startLng);


        var polyLineCo = [ 
        startLatLng,
        new google.maps.LatLng(endLat,endLng)
        ];

        var strokeColor = "#009933";
        if(occupied === 'true'){
            strokeColor = "#FF0000";
        }


        if(currentAppliedRule){
            if(currentAppliedRule.getParkSpaceType() === 'Normal'){
                //Do nothing should represent the value of occupied or not
            } else {
                //red occupied
                strokeColor = "#FF0000";
            }
        }

        var lineSymbol = {
            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW
        };

        var polyLine = new google.maps.Polyline({
            path: polyLineCo,
            strokeColor: strokeColor,
            strokeOpacity: 1.0,
            strokeWeight: 4,
            icons: [{
                //icon:'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-1f92de/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/car.png'
            }]
        });


        var actGoogMap = this.getActualGoogleMap();
        var tbody = peReport.innerHTML;
        var infowindow = new InfoBubble({
            position: startLatLng,
            maxWidth: 170,
            maxHeight: 180
        });

        infowindow.addTab('Details',tbody);

        var tempStore = Ext.create('Ext.data.Store', {
            model: 'MyApp.model.PERule'  
        });

        tempStore.add(peRules);
        tempStore.sort('fromTimeHour', 'ASC');
        peRules = tempStore.getData().items;


        if(peRules){
            for(var i=0; i < peRules.length; i++){
                var peRule = peRules[i];
                if(peRule){
                    infowindow.addTab(peRule.getName(),this.getRuleReport(peRule));
                }  
            }
        }


        /*    
        var infowindow = new InfoBox({
        id: "infobox",
        content: tbody,
        position: startLatLng,
        disableAutoPan: false,
        maxWidth: 150,
        pixelOffset: new google.maps.Size(-140, 0),
        zIndex: null,
        boxStyle: {
        background: "url('http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/examples/tipbox.gif') no-repeat",
        opacity: 0.75,
        width: "280px"
        },
        closeBoxMargin: "12px 4px 2px 2px",
        closeBoxURL: "http://www.google.com/intl/en_us/mapfiles/close.gif",
        infoBoxClearance: new google.maps.Size(1, 1)
        });
        */


        /*
        if(ruleIdAsArray){
        for(var i=0; i < ruleIdAsArray.length; i++){
        var peRuleId = ruleIdAsArray[i];
        var peRule = peRuleDAO.getById(peRuleId);
        if(peRule){
        appliedCurrently = peRule.get('appliedCurrently');
        appliedIntheFuture = peRule.get('appliedFuture');
        if((appliedCurrently === true) || (appliedIntheFuture === true)){
        infowindow.addTab('starttime');
        }
        }  
        }
        }
        */

        google.maps.event.addListener(polyLine, 'click', function() {
            infowindow.open(actGoogMap,null);
        });

        MyApp.app.getController('MainViewController').config.createdPolyLines.push(polyLine);
        polyLine.setMap(this.getActualGoogleMap());
    },

    launch: function() {
        var senchaGoogleMap = this.getMyMap();    


        var mapOpts = {
            zoom: 19,
            center: parraCoordinates,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };


        var parraCoordinates = {
            latitude: -33.815498, 
            longitude: 151.004893
        };


        senchaGoogleMap.setMapCenter(parraCoordinates);
        senchaGoogleMap.setUseCurrentLocation(false);
        senchaGoogleMap.setMapOptions(mapOpts);


        var now = new Date();
        var nowHours = now.getHours();
        var nowMin = now.getMinutes();


        this.dynamicallyAdjustComponentSize();
        this.loadParkingData();

        var defaultValues = {
            HourPickerSlot: '1',
            MinutePickerSlot: '00',
            AMPMPickerSlot: 'PM'
        };


        Ext.getCmp('TimePicker').setDefaults(defaultValues); 
        Ext.getCmp('TimePicker').getValues();

        /*
        window.setInterval(function(){
        MyApp.app.getController('MainViewController').refreshPESpaces();
        }, 20000);
        */

        var timeSlider = this.getTimeSlider();
        var maxValue = 12 * 24 * 7;
        timeSlider.setMaxValue(maxValue);
    },

    createHours: function(peHours) {
        var data_hours = [];


        if(peHours===0){
            data_hours.push({
                text: '00',
                value: '00'
            });   
        }

        for(i=0; i<=peHours; i++) {

            data_hours.push({
                text: i,
                value: i
            });


        } 

        return data_hours;
    },

    createMinutes: function(peRuleMinutes) {

        var mins = peRuleMinutes - 0;
        var discreteFiveIncrements = (5 * Math.ceil(mins/5))/5;


        data_minuts = [];

        data_minuts.push({
            text: '00',
            value: '00'
        });
        data_minuts.push({
            text: '05',
            value: '05'
        });

        if(discreteFiveIncrements==1){
            return data_minuts;   
        }


        var iterations = discreteFiveIncrements - 1;
        if(discreteFiveIncrements===0){
            iterations = 10;
        }

        var val = 10;
        for(i=0; i<iterations; i++) {
            data_minuts.push({
                text: val,
                value: val
            });
            val = val + 5;
        }

        return data_minuts;
    },

    getTimePickerValueObj: function(sliderValue) {
        var hours = this.getHours();
        var minutes = this.getMinutes();

        var timeinDecimals = sliderValue/59;
        var minHrs = timeinDecimals.toString().split(".");

        var hoursInD = minHrs[0];
        var minInD = timeinDecimals - hoursInD;

        var hourArrayIndex = hoursInD;
        var hourPickerValue = hours[hourArrayIndex];

        var minArrayIndex = Math.floor((minInD * 59)/5);
        var minutePickerValue = minutes[minArrayIndex];

        //alert('MinArray:' + minArrayIndex);
        //alert('HourArray:' + hourArrayIndex);
        //alert('MinText:' + minutePickerValue.text);
        //alert('HourText:' + hourPickerValue.text);

        /*


        console.log('<><><><><><><><><><><><><><><><><><>');
        console.log('sliderValue' + sliderValue);
        console.log('timeinDecimals' + timeinDecimals);
        console.log('minInD' + minInD);
        console.log('minArrayIndex' + minArrayIndex);
        console.log('minutePickerValue' + minutePickerValue.text);






        console.log('<><><><><><><><><><><><><><><><><><>');
        console.log('sliderValue' + sliderValue);
        console.log('timeinDecimals' + timeinDecimals);
        console.log('hoursInD' + hoursInD);
        console.log('hourArrayIndex' + hourArrayIndex);
        console.log('hourPickerValue' + hourPickerValue.text);



        return {
        MinutePickerSlot: hourPickerValue.text
        };

        */



        /*timePicker.setValue({
        HourPickerSlot: '20',
        MinutePIckerSlot: '32' });
        */


        return {
            MinutePickerSlot: minutePickerValue.text,
        HourPickerSlot: hourPickerValue.text};
    },

    loadParkingData: function() {
        var peSpaceDAOStore = Ext.getStore('PESpaceDAO');
        //var peProxy = peSpaceDAOStore.getProxy();
        //var peSpaceProxyUrl = "http://54.200.11.164/parking-engine/PESpace/all";
        //var urlRequest = peSpaceProxyUrl;
        //peProxy.setUrl(urlRequest);





        peSpaceDAOStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.loadPERules();
            },
            scope: this
        });
        /*Accessing Information from Records:
        var mainViewController = MyApp.app.getController('MainViewController');

        for(var i=0;i<records._records.length;i++){

        var record = peStore.getAt(i);
        var id =  record.get('id');
        var startLat =  record.get('startLat');
        var startLng =  record.get('startLng');
        var endLat =  record.get('endLat');
        var endLng =  record.get('endLng');

        mainViewController.createPolyLines(startLat,startLng,endLat,endLng);

        */
    },

    refreshMap: function() {
        var peSpaceDAO = Ext.getStore('PESpaceDAO'); 
        var peRuleDAO = Ext.getStore('PERuleDAO');
        var peMeterDAO = Ext.getStore('PEMeterDAO');

        var peSpaces = peSpaceDAO.getData();
        var peRules = peRuleDAO.getData();
        var peMeters = peMeterDAO.getData();

        var mainViewController = MyApp.app.getController('MainViewController');

        reInitRules();
        this.removePolyLinesFromMap();

        for(var i=0;i<peSpaceDAO.getAllCount();i++){
            var record = peSpaceDAO.getAt(i);
            var id =  record.get('id');
            var startLat =  record.get('startLat');
            var startLng =  record.get('startLng');
            var endLat =  record.get('endLat');
            var endLng =  record.get('endLng');
            var occupied = record.get('occupied');
            var ruleIds = record.get('ruleIds');
            var ruleIdAsArray = ruleIds.split(",");
            var peRulesForPESpace = getRulesFromRuleIds(ruleIdAsArray);
            var generatedReport = this.generateDetailsReport(peRulesForPESpace,occupied);
            mainViewController.createPolyLines(startLat,startLng,endLat,endLng,''+occupied+'',generatedReport.peRepDescription,generatedReport.appliedPERules,generatedReport.currentAppliedRule);
        }

        for(var m=0;m<peMeterDAO.getAllCount();m++){
            var mRecord = peMeterDAO.getAt(m);
            var mId =  mRecord.get('id');
            var mPointLat =  mRecord.get('pointLat');
            var mPointLng =  mRecord.get('pointLng');
            var mParkingSpaceIds =  mRecord.get('parkingSpaceIds');
            var mParkingRuleIds =  mRecord.get('parkingRuleIds');
            mainViewController.addMarker(mId,mPointLat,mPointLng,'SomeType Of Description');     
        }


        function getRulesFromRuleIds(ruleIdAsArray){ 
            var peRules = [];
            for(var i=0; i < ruleIdAsArray.length; i++){
                var peRuleId = ruleIdAsArray[i];
                var peRule = peRuleDAO.getById(peRuleId);
                if(peRule){
                    peRules.push(peRule); 
                }  
            }
            return peRules;
        }

        //Defaults currentlyApplied and Future Applied back to false
        function reInitRules(){

            for(var i=0;i<peRuleDAO.getAllCount();i++){
                var peRuleReInit = peRuleDAO.getAt(i);
                peRuleReInit.reInitRule();
            }

        }
    },

    loadPERules: function() {
        var peStore = Ext.getStore('PERuleDAO');
        var mainViewController = MyApp.app.getController('MainViewController');

        peStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.loadPEMeters();
            },
            scope: this
        });
        /*Accessing Information from Records:
        var mainViewController = MyApp.app.getController('MainViewController');

        for(var i=0;i<records._records.length;i++){

        MyApp.app.getController('MainViewController').peLoadedSpaces = [''];
        var record = peStore.getAt(i);
        var id =  record.get('id');
        var startLat =  record.get('startLat');
        var startLng =  record.get('startLng');
        var endLat =  record.get('endLat');
        var endLng =  record.get('endLng');

        mainViewController.createPolyLines(startLat,startLng,endLat,endLng);

        */
    },

    loadPEMeters: function() {
        var peMeterDAOStore = Ext.getStore('PEMeterDAO');
        var mainViewController = MyApp.app.getController('MainViewController');

        peMeterDAOStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.refreshMap();
            },
            scope: this
        });
    },

    dynamicallyAdjustComponentSize: function() {
        this.getTitleToolBar().setSize(window.innerWidth,getPercentage(5,window.innerHeight));
        this.getBottomToolBar().setSize(window.innerWidth,getPercentage(5,window.innerHeight));
        this.getMainViewContainer().setSize(window.innerWidth,window.innerHeight);
        this.getMyMap().setSize(getPercentage(100,window.innerWidth),getPercentage(100,window.innerHeight));
        Ext.getCmp('MapContainer').setSize(window.innerWidth,window.innerHeight);

        //var timePickerPanelWidth = getPercentage(25,window.innerWidth);
        //var timePickerPanelHeight = getPercentage(30,window.innerHeight);
        //this.getTimePickerPanel().setSize(timePickerPanelWidth,timePickerPanelHeight);

        //var timepickerHeight = timePickerPanelHeight/1.8;
        //Ext.getCmp('TimePicker').setSize(timePickerPanelWidth,timepickerHeight);
        //Ext.getCmp('HourPickerSlot').setSize(timePickerPanelWidth/3,getPercentage(90,timepickerHeight));
        //Ext.getCmp('MinutePickerSlot').setSize(timePickerPanelWidth/3,timePickerPanelHeight/1);
        //Ext.getCmp('AMPMPickerSlot').setSize(timePickerPanelWidth/3,timePickerPanelHeight/1);


        function getPercentage(percentageValue,totalSize)
        {
            return (totalSize/100)*percentageValue;
        }

    },

    refreshPESpaces: function() {
        var peSpaceDAOStore = Ext.getStore('PESpaceDAO');
        //var peProxy = peSpaceDAOStore.getProxy();
        //var peSpaceProxyUrl = "http://54.200.11.164/parking-engine/PESpace/all";
        //var urlRequest = peSpaceProxyUrl;
        //peProxy.setUrl(urlRequest);





        peSpaceDAOStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.removePolyLinesFromMap();
                this.refreshMap();
            },
            scope: this
        });
    },

    removePolyLinesFromMap: function() {
        var existingPolyLines =  MyApp.app.getController('MainViewController').config.createdPolyLines;

        for(var i=0;i<existingPolyLines.length;i++){
            existingPolyLines[i].setMap(null);
        }

        existingPolyLines.splice(i,existingPolyLines.length);
    },

    createAMPM: function() {
        var data_AMPM = [];

        data_AMPM.push({
            text:'PM',
            value:'PM'
        });
        data_AMPM.push({
            text:'AM',
            value:'AM'
        });

        return data_AMPM;
    },

    checkAndApplyRule: function(peRule, peSpaceReport, appliedRules) {

        var totalRuleTimeInHours;
        var totalRuleCost;
        var endTime; 
        var startTime; 

        if(peRule.canBeAppliedCurrently(peSpaceReport)){
            endTime = peSpaceReport.getMinEndTime();
            if(endTime !== 0){  
                if(peSpaceReport.getMinEndTime()>peRule.getToTime()){
                    endTime = peRule.getToTime();
                }
                startTime = peSpaceReport.getStartTime();
                if(peSpaceReport.getStartTime()<peRule.getFromTime()){
                    startTime = peRule.getFromTime();
                }

                totalRuleTimeInHours = (endTime - startTime)/1000/60/60;
                totalRuleCost = totalRuleTimeInHours * peRule.get('cost');
                //alert('totalRuleTimeInHours: ' + totalRuleTimeInHours);
                //alert('totalRuleCost: ' + totalRuleCost);
                peSpaceReport.addToTotalCost(totalRuleCost);
                //alert('totalReportCost: ' + peSpaceReport.get('totalCost'));
            }
            appliedRules.push(peRule);

        } else if(peRule.canBeAppliedInTheFuture(peSpaceReport)){

            endTime = peSpaceReport.getMinEndTime();
            if(endTime !== 0){
                if(peSpaceReport.getMinEndTime()>peRule.getToTime()){
                    endTime = peRule.getToTime();
                }

                startTime = peRule.getFromTime();
                totalRuleTimeInHours = (endTime - startTime)/1000/60/60;
                totalRuleCost = totalRuleTimeInHours * peRule.get('cost');
                //alert('totalRuleTimeInHours: ' + totalRuleTimeInHours);
                //alert('totalRuleCost: ' + totalRuleCost);
                peSpaceReport.addToTotalCost(totalRuleCost);
                //alert('totalReportCost: ' + peSpaceReport.get('totalCost'));
            }
            appliedRules.push(peRule);


        }//END OF ELSE IF   
    },

    generateDetailsReport: function(peRules, occupied) {
        var peRep = MyApp.app.getController('MainViewController').config.globalPeReport;


        if(!peRep){
            peRep = Ext.create('MyApp.model.PEReport', new Date());    
            // peRep.set('startHour','16');
            // peRep.set('startMinute','30');
            peRep.set('minEndHour','0');
            peRep.set('minEndMinute','0');
            peRep.set('mode','REALTIME');
            MyApp.app.getController('MainViewController').config.globalPeReport = peRep;
        }

        var mode = peRep.get('mode');

        /* ruleIds and appliedPERules, both contain all the current and future applied rules.
        Even though the applied future rules are not currently being used.
        */
        var ruleIds = [];
        var appliedPERules = [];

        var peRuleAppliedCurrently;

        for(var i=0; i < peRules.length; i++){
            var peRule = peRules[i];
            if(peRule){
                this.checkAndApplyRule(peRule,peRep,appliedPERules);  
                if(peRule.getAppliedCurrently()){
                    peRuleAppliedCurrently = peRule;
                }
            }  
        }

        for(var u=0; u < appliedPERules.length; u++){
            var appliedPeRule = peRules[u];
            if(appliedPeRule){
                ruleIds.push(appliedPeRule.getId());
            }  
        }


        var reportTable = generate_table(mode,peRep.getStartTime(),peRep.getMinEndTime(),peRep.get('dayOfWeek'),ruleIds,peRep.get('totalCost'),'test');
        var peRepDescription = reportTable.table;
        var currentAppliedRule = reportTable.currentAppliedRule;


        function generate_table(mode,startTime,endTime,day,ids,totalCost,reNew) {
            // creates the reference for the body
            var body = document.createElement("body");

            // creates a <table> element and a <tbody> element
            var tbl     = document.createElement("table");
            var tblBody = document.createElement("tbody");
            //var br = document.createElement("br");

            createRow("Mode:",mode);
            createRow("Start ParkingTime:",String(startTime).split("GMT")[0]);
            var allTimes = false;
            if(endTime === 0){
                allTimes = true;
            }

            if(!allTimes){
                createRow("End ParkingTime:",String(endTime).split("GMT")[0]); 
                if(ids.length>0){
                    createRow("TotalCost",'$'+totalCost);
                } else {
                    createRow("TotalCost","Free PARKING");
                }
                createRow("Re-New Tickets",reNew);
            } else {
                //createRow("End ParkingTime:","Time Duration NOT Selected"); 
            }

            if(mode === "REALTIME")
            {
                var peSpaceStatus = "Available";
                if(occupied){
                    peSpaceStatus = "Not Available";
                }
                createRow("Current Status",peSpaceStatus);

            } else {



            }
            //createRow("Day",day);

            if(ids.length > 0){
                createRow("RuleIds",ids);
            }

            if(peRuleAppliedCurrently){
                createRow('Parking Type',peRuleAppliedCurrently.getParkSpaceType());
                createRow('Currently Applied Rule:',peRuleAppliedCurrently.getName());
            } else {
                createRow('Parking Type',"Free PARKING");
            }





            function createRow(lhs,rhs){
                var row=tbl.insertRow(-1);
                var cell1=row.insertCell(0);
                var cell2=row.insertCell(1);
                cell1.innerHTML=lhs;
                cell2.innerHTML=rhs;
            } 

            // put the <tbody> in the <table>
            tbl.appendChild(tblBody);
            // appends <table> into <body>
            //--> if you wanted to adda a break body.appendChild(br);
            body.appendChild(tbl);
            // sets the border attribute of tbl to 2;
            tbl.setAttribute("border", "2");

            var detailsTable = {
                table: body,  
                currentAppliedRule: peRuleAppliedCurrently
            };



            return detailsTable;
        }



        var generatedReport = {
            peRepDescription: peRepDescription,
            appliedPERules: appliedPERules,
            currentAppliedRule: currentAppliedRule
        };


        return generatedReport;
    },

    getRuleReport: function(peRule) {

        // creates the reference for the body
        var body = document.createElement("body");

        // creates a <table> element and a <tbody> element
        var tbl     = document.createElement("table");
        var tblBody = document.createElement("tbody");
        //var br = document.createElement("br");

        var toDay = peRule.get('toDay');
        var fromDay = peRule.get('fromDay');
        var sameDay = false;
        if(toDay === fromDay){
            sameDay = true;
        }

        /*

        if(sameDay){
        createRow("Day:",convertDayIntToString(toDay));
        } else {
        createRow("From Day:",convertDayIntToString(fromDay));
        createRow("To Day:",convertDayIntToString(toDay));
        }
        */



        createRow("StartTime:",String(peRule.getFromTime()).split('GMT')[0]);
        createRow("EndTime:",String(peRule.getToTime()).split('GMT')[0]);
        createRow("Parking Space Type:",String(peRule.getParkSpaceType()));
        createRow("Cost/Hour","$"+peRule.get('cost'));
        createRow("Max Time Limit",peRule.get('timeLimit'));



        function createRow(lhs,rhs){
            var row=tbl.insertRow(-1);
            var cell1=row.insertCell(0);
            var cell2=row.insertCell(1);
            cell1.innerHTML=lhs;
            cell2.innerHTML=rhs;
        } 

        // put the <tbody> in the <table>
        tbl.appendChild(tblBody);
        // appends <table> into <body>
        //--> if you wanted to adda a break body.appendChild(br);
        body.appendChild(tbl);
        // sets the border attribute of tbl to 2;
        tbl.setAttribute("border", "2");
        return body;
    },

    convertDayIntToString: function(dayInt) {
        if(dayInt===0){
            return "Sunday";   
        } else if (dayInt===1){
            return "Monday";
        } else if (dayInt===2){
            return "Tuesday";
        } else if (dayInt===3){
            return "Wednesday";
        } else if (dayInt===4){
            return "Thursday";
        } else if (dayInt===5){
            return "Friday";
        } else if (dayInt===6){
            return "Saturday";
        }
    },

    convertDayStringToInt: function(dayAsString) {
        if(dayAsString==="Sunday"){
            return 0;   
        } else if (dayAsString==="Monday"){
            return 1;
        } else if (dayAsString==="Tuesday"){
            return 2;
        } else if (dayAsString==="Wednesday"){
            return 3;
        } else if (dayAsString==="Thursday"){
            return 4;
        } else if (dayAsString==="Friday"){
            return 5;
        } else if (dayAsString==="Saturday"){
            return 6;
        }
    },

    convertTo24HourTime: function(timeString) {
        // Time String has to be the following format: "10:30 AM"

        var today = new Date();
        today = this.nextDay(today.getDay());
        var time = am_pm_to_hours(timeString).split(":");

        return new Date(today.getFullYear(),(today.getMonth()),today.getDate(),time[0],time[1]); 



        function am_pm_to_hours(time) {
            var hours = Number(time.match(/^(\d+)/)[1]);
            var minutes = Number(time.match(/:(\d+)/)[1]);
            var AMPM = time.match(/\s(.*)$/)[1];
            if (AMPM == "PM" && hours < 12) hours = hours + 12;
            if (AMPM == "AM" && hours == 12) hours = hours - 12;
            var sHours = hours.toString();
            var sMinutes = minutes.toString();
            if (hours < 10) sHours = "0" + sHours;
            if (minutes < 10) sMinutes = "0" + sMinutes;
            return (sHours +':'+sMinutes);
        }
    },

    nextDay: function(x) {
        var now = new Date();
        var day = now.getDay();

        //If next day OR today
        now.setDate(now.getDate()-1);

        //http://stackoverflow.com/questions/1579010/get-next-date-from-weekday-in-javascript
        now.setDate(now.getDate() + (x+(7-now.getDay())) % 7);
        return now;
    },

    clearAddressList: function() {
        var searchLocationPanel = Ext.getCmp('SearchLocationPanel');

        var addressList = Ext.getCmp('AddressList');
        searchLocationPanel.remove(addressList,true);

        /*Note destorying the list component was the only way to completely remove the contents
        of the list. If the list does not exist then it is create during
        MyApp.app.getController('MainViewController').showAddress */
    },

    showAddress: function(address, addressArray, searchFieldId) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode( { 'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {

            for (var i=0;i<results.length;i++)
            { 
                var formattedAddress = results[i].formatted_address;
                var geoLocation = results[i].geometry.location;

                if(i>10){
                    break;   
                }

                var resultAddress = 
                {
                    formatted_address: formattedAddress,
                    geo_location: geoLocation,
                    search_field: searchFieldId
                };

                addressArray.push(resultAddress);
            }

            showAddressCallBack(addressArray);

        } else {
            alert('Geocode was not successful for the following reason: ' + status);
        }
    });

    function showAddressCallBack(addressArray){
        var addressList = Ext.getCmp('AddressList');
        if(addressList){
            MyApp.app.getController('MainViewController').clearAddressList();

        } 

        var newAddressList =  Ext.create('Ext.List',{
            action: 'addressListEvent',
            height: 753,
            id: 'AddressList',
            itemId: 'mylist',
            width: 899,
            itemTpl: [
            '<div style=\'margin-left:10px;\'>',
            '    {formatted_address},{geo_location}',
            '</div>'
            ]
        }
        );

        newAddressList.setData(addressArray);
        Ext.getCmp('SearchLocationPanel').add(newAddressList);

    }
    },

    changeView: function(activeItem) {

        var that = this;

        if(activeItem===1){
            this.getMainViewContainer().animateActiveItem(1, {type: "slide", direction: "left"});
            hideMainScreenButtons();
            Ext.getCmp('SearchLocation').setHidden(false);
            Ext.getCmp('BackButton').setHidden(false);


        } else if (activeItem===5) {
            this.getMainViewContainer().animateActiveItem(5, {type: "slide", direction: "left"});
            hideMainScreenButtons();    
            showPayScreenButton();

        } else {

            this.getMainViewContainer().animateActiveItem(0, {type: "slide", direction: "right"});
            showMainScreenButtons();
            hidePayScreenButton();
            Ext.getCmp('BackButton').setHidden(true);


            //onSliderButtonTap
            var timeSlider = this.getTimeSlider();
            var toolTip = this.getToolTip();

            if(timeSlider.isHidden()){
                Ext.getCmp('SliderButton').setIconCls('arrow_up');
                timeSlider.setHidden(false);
            } else {
                Ext.getCmp('SliderButton').setIconCls('arrow_down');
                timeSlider.setHidden(true);
                toolTip.setHidden(true);
            }
        }


        function hideMainScreenButtons(){
            Ext.getCmp('SliderButton').setHidden(true);
            Ext.getCmp('CurrentLocation').setHidden(true);
            Ext.getCmp('TimeSlider').setHidden(true);
            Ext.getCmp('SearchLocation').setHidden(true);
            Ext.getCmp('RefreshButton').setHidden(true);
            Ext.getCmp('PayButtonScreen').setHidden(true);
        }

        function showMainScreenButtons(){
            Ext.getCmp('SliderButton').setHidden(false);
            Ext.getCmp('CurrentLocation').setHidden(false);
            Ext.getCmp('TimeSlider').setHidden(false);
            Ext.getCmp('SearchLocation').setHidden(false);
            Ext.getCmp('RefreshButton').setHidden(false);
            Ext.getCmp('PayButtonScreen').setHidden(false);
        }

        function hidePayScreenButton(){
            that.getPayButton().setHidden(true);
            that.getCancelButton().setHidden(true);  
        }

        function showPayScreenButton(){
            that.getPayButton().setHidden(false);
            that.getCancelButton().setHidden(false); 
        }
    },

    addDirections: function(start, end) {
        var directionsDisplay = this.getDirectionsRenderer();
        var directionsService = new google.maps.DirectionsService();
        var map = this.getActualGoogleMap();
        directionsDisplay.setMap(map);

        var trafficLayer = this.getTrafficLayer();
        trafficLayer.setMap(map);

        var request = {
            origin:start,
            destination:end,
            travelMode: google.maps.TravelMode.DRIVING,
            durationInTraffic: true
        };

        directionsService.route(request, function(result, status){directionServiceCallBack(result, status);});


        function directionServiceCallBack(result, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(result);
            }
        }                        
    },

    addCurrentLocation: function(address, searchFieldId) {
        var initialLocation;
        var siberia = new google.maps.LatLng(60, 105);
        var newyork = new google.maps.LatLng(40.69847032728747, -73.9514422416687);
        var browserSupportFlag =  false;

        //var map = this.getActualGoogleMap();

        if(navigator.geolocation) {
            browserSupportFlag = true;
            navigator.geolocation.getCurrentPosition(function(position) {
                initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
                success(initialLocation);
                // map.setCenter(initialLocation);
            }, function() {
                handleNoGeolocation(browserSupportFlag);
            });
        }
        // Browser doesn't support Geolocation
        else {
            browserSupportFlag = false;
            handleNoGeolocation(browserSupportFlag);
        }

        function handleNoGeolocation(errorFlag) {
            if (errorFlag === true) {
                alert("Geolocation service failed.");
                initialLocation = newyork;
            } else {
                alert("Your browser doesn't support geolocation. We've placed you in Siberia.");
                initialLocation = siberia;
            }
            //map.setCenter(initialLocation);
        }

        //Called Via Call Back function
        function success(currentLocation){
            var currentLocationAddress = 
            {
                formatted_address: "Current Location",
                geo_location: currentLocation,
                search_field: "SearchLocationField"
            };
            var addressArray = [];
            addressArray.push(currentLocationAddress);
            MyApp.app.getController('MainViewController').showAddress(address,addressArray,searchFieldId);
        }

    },

    getDirectionsRenderer: function() {
        //Must be a singleton
        var directionsDisplay = MyApp.app.getController('MainViewController').config.directionsRenderer;

        if(directionsDisplay){
            return directionsDisplay;
        } else {
            //Initialize  
            MyApp.app.getController('MainViewController').config.directionsRenderer =  new google.maps.DirectionsRenderer();
            directionsDisplay = MyApp.app.getController('MainViewController').config.directionsRenderer;
        }    


        return directionsDisplay;
    },

    getTrafficLayer: function() {
        //Must be a singleton
        var trafficLayer = MyApp.app.getController('MainViewController').config.trafficLayer;

        if(trafficLayer){
            return trafficLayer;
        } else {
            //Initialize  
            MyApp.app.getController('MainViewController').config.trafficLayer = new google.maps.TrafficLayer();
            trafficLayer = MyApp.app.getController('MainViewController').config.trafficLayer;
        }    


        return trafficLayer;


    },

    convertToTwelveHourTime: function(timeAsString) {
        //timeAsString is 24Hour Time in the following formatt "12:[0-59]:[0-59]"

        var timeArray = timeAsString.split(':');
        var hh = timeArray[0];
        var m = timeArray[1];
        var s = timeArray[2];
        var dd = "AM";
        var h = hh;
        if (h >= 12) {
            h = hh-12;
            dd = "PM";
        }
        if (h === 0) {
            h = 12;
        }


        /* if you want 2 digit hours:
        h = h<10?"0"+h:h; */

        var pattern = new RegExp(hh+":"+m+":"+s);

        m = m<10?"0"+m:m;

        s = s<10?"0"+s:s;

        var replacement = h+":"+m;
        /* if you want to add seconds
        replacement += ":"+s;  */
        replacement += " "+dd;    

        return timeAsString.replace(pattern,replacement);
    }

});