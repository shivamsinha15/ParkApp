/*
 * File: app/controller/MainViewController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MainViewController', {
    extend: 'Ext.app.Controller',

    config: {
        setTime: 'silderValue',
        createdPolyLines: [
            
        ],

        refs: {
            streetParkingPanel: '#StreetParkingPanel',
            timeSlider: '#TimeSlider',
            mainViewContainer: '#MainViewContainer',
            bottomToolBar: '#BottomToolBar',
            backButton: '#BackButton',
            daySelectorButton: '#DaySelectorButton',
            searchLocationField: '#SearchLocationField',
            myMap: '#MyMap',
            weekDay: '#Weekday',
            daySelectorPanel: '#DaySelectorPanel',
            weekEnd: '#Weekend',
            timePicker: '#TimePicker',
            timePickerPanel: '#TimePickerPanel',
            hourPickerSlot: '#HourPickerSlot',
            minutePickerSlot: '#MinutePickerSlot',
            titleToolBar: '#TitleToolBar'
        },

        control: {
            "[action=currentLocationButton]": {
                tap: 'onCurrentLocationTap'
            },
            "[action=searchLocationButtonEvent]": {
                tap: 'onSearchLocationTap'
            },
            "[action=backButtonEvent]": {
                tap: 'onBackButtonTap'
            },
            "[action=addressListEvent]": {
                itemsingletap: 'onListItemSingletap'
            },
            "[action=weekDayCheckBox]": {
                check: 'onWeekdayCheckboxfieldCheck',
                uncheck: 'onWeekdayCheckboxfieldUncheck'
            },
            "[action=weekEndCheckBox]": {
                check: 'onWeekendCheckboxfieldCheck',
                uncheck: 'onWeekendCheckboxfieldUncheck'
            },
            "sliderfield": {
                drag: 'onSliderfieldDrag'
            },
            "[action=onTimeButtonTap]": {
                tap: 'onTimeButtonTap'
            }
        }
    },

    onCurrentLocationTap: function(button, e, eOpts) {
        alert("Current Location");
        var senchaGoogleMap = this.getMyMap();
        senchaGoogleMap.setUseCurrentLocation(true);
    },

    onSearchLocationTap: function(button, e, eOpts) {

        this.getMainViewContainer().animateActiveItem(1, {type: "slide", direction: "left"});
        Ext.getStore('MyDirectStore').load();
        this.getBackButton().show();
    },

    onBackButtonTap: function(button, e, eOpts) {

        this.getMainViewContainer().animateActiveItem(0, {type: "slide", direction: "right"});
        this.getBackButton().hide();


    },

    onListItemSingletap: function(dataview, index, target, record, e, eOpts) {
        this.getMainViewContainer().animateActiveItem(0, {type: "slide", direction: "right"});
        this.getBackButton().hide();
        var senchaGoogleMap = this.getMyMap();
        senchaGoogleMap.setUseCurrentLocation(false);

        var lat = record.get('lat');
        var lng = record.get('lng');    

        var coordinates = {
            latitude: lat, 
            longitude: lng
        };


        senchaGoogleMap.setMapCenter(coordinates);

        var mapOpts = {
            zoom: 18        
        };

        senchaGoogleMap.setMapOptions(mapOpts);
        var actualGoogleMap = this.getActualGoogleMap();//senchaGoogleMap.getMap();


        var myLatlng = new google.maps.LatLng(-33.817924,151.003346);




        this.createMarkers();
        this.createPolyLines();


        /* This shit works
        marker2Content = '<div style="width:450px; line-height:9px; font:Arial, Helvetica, sans-serif small; margin:0px; padding:0px;"><br /><strong>Meter Number:</strong> AI01 - 1 spaces<br /><br /><span style="color:#333;">Church & Aird Streets Parramatta</span> <br /><br /><span style="font-size:11px;">Monday to Friday: 8am - 6pm - 30min P - $1.60 Per half hour : : 6pm - 10pm - 4P - $1.10 Per hour</span><br /><br /><span style="font-size:11px;">Saturday: 8am - 4pm - 30min P - $0.50 Per Half hour : : 4pm - 10pm - 4P - $1.10 Per hour</span> <br /><br /><strong>Other Parking restrictions</strong><br /><br /><span style="font-size:11px;">Disabled Parking: 2 Hour Parking Mon-Fri (8am - 6pm) Sat(8am - 4pm)<br /><br /> 15 Minutes Free Meter Parking <br /><br /> </span><br /></div>';

        marker2.info  = new google.maps.InfoWindow({
        content: marker2Content
        });

        google.maps.event.addListener(marker2, 'click', function() {
        marker2.info.open(actualGoogleMap, marker2);
        });
        */



        /*

        Example of a static marker:

        var marker2 = new google.maps.Marker({
        position: myLatlng,
        map: actualGoogleMap,
        title:"Hello World!"
        });


        Map Events:
        https://developers.google.com/maps/documentation/javascript/events?hl=en
        Need to add Info windows:
        https://developers.google.com/maps/documentation/javascript/overlays#InfoWindows


        Click To Add Markers:
        google.maps.event.addListener(actualGoogleMap, 'click', function(event) {
        addMarker(event.latLng);
        });

        */
    },

    onWeekdayCheckboxfieldCheck: function(checkboxfield, e, eOpts) {
        var weekEndCheckBox = this.getWeekEnd();

        if(weekEndCheckBox.isChecked()){
            weekEndCheckBox.uncheck();
        } 
    },

    onWeekendCheckboxfieldCheck: function(checkboxfield, e, eOpts) {
        var weekDayCheckBox = this.getWeekDay();

        if(weekDayCheckBox.isChecked()){
            weekDayCheckBox.uncheck();
        } 
    },

    onWeekdayCheckboxfieldUncheck: function(checkboxfield, e, eOpts) {
        var weekEndCheckBox = this.getWeekEnd();

        if(!weekEndCheckBox.isChecked()){
            weekEndCheckBox.check();
        } 
    },

    onWeekendCheckboxfieldUncheck: function(checkboxfield, e, eOpts) {
        var weekDayCheckBox = this.getWeekDay();

        if(!weekDayCheckBox.isChecked()){
            weekDayCheckBox.check();
        } 
    },

    onSliderfieldDrag: function(sliderfield, sl, thumb, e, eOpts) {
        var timePickerPanel = this.getTimePickerPanel();
        var hideAnimation =  {    
            type: 'slide',
            direction: 'up',
            duration: 300
        };           

        timePickerPanel.showBy(thumb);
        var timePickerValObj = this.getTimePickerValueObj(sliderfield.getValue());

        var timePicker = this.getTimePicker();

        /*timePicker.setValue({
        HourPickerSlot: '20',
        MinutePIckerSlot: '32' });
        */


        timePicker.setValue(timePickerValObj);

        Ext.Anim.run(timePickerPanel, 'fade', {
            duration: 10000,
            easing: 'ease-out'
        });

        var task = Ext.create('Ext.util.DelayedTask', function() {
            timePickerPanel.hide();
        });
        task.delay(10000);



    },

    onTimeButtonTap: function(button, e, eOpts) {
        var timePickerPanel = this.getTimePickerPanel();

        if(timePickerPanel.isHidden()){
            this.getTimePickerPanel().showBy(button);
        } else {
            this.getTimePickerPanel().setHidden(true);
        }
    },

    addMarker: function(name, latitude, longitude, description) {
        var myIcon = {
            url: "http://127.0.0.1/resources/img/parking-meter-export.png"
        };

        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(latitude,longitude),
            icon: myIcon,
            map: this.getActualGoogleMap(),
            clickable: true
        });


        marker.info = new google.maps.InfoWindow({
            content: description 
        });


        new google.maps.event.addListener(marker, 'click', function() {
            marker.info.open(marker.map, marker);
        });



        /* Adding markers to a map 

        ParraCity 
        - http://www.parracity.nsw.gov.au/live/my_home/parking__and__transport/parking
        - http://www.parracity.nsw.gov.au/__data/asset_types/google_map/js/map_lib.js
        http://stackoverflow.com/questions/10132625/google-maps-marker-and-sencha-touch-2


        */


    },

    getActualGoogleMap: function() {
        /*
        this.getMyMap().getMap();
        Not using this, because it has a chance of being called from onload from the datastore 

        */
        return  Ext.getCmp('MyMap').getMap();


    },

    createPolyLines: function(startLat, startLng, endLat, endLng, occupied, peReport, peRules) {
        var startLatLng = new google.maps.LatLng(startLat,startLng);


        var polyLineCo = [ 
        startLatLng,
        new google.maps.LatLng(endLat,endLng)
        ];

        var strokeColor = "#009933";
        if(occupied === 'true'){
            strokeColor = "#FF0000";
        }

        var lineSymbol = {
            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW
        };

        var polyLine = new google.maps.Polyline({
            path: polyLineCo,
            strokeColor: strokeColor,
            strokeOpacity: 1.0,
            strokeWeight: 4,
            icons: [{
                //icon:'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-1f92de/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/car.png'
            }]
        });


        var actGoogMap = this.getActualGoogleMap();
        var tbody = peReport.innerHTML;
        var infowindow = new InfoBubble({
            position: startLatLng,
            maxWidth: 80,
            maxHeight: 150
        });

        infowindow.addTab('Details',tbody);

        var tempStore = Ext.create('Ext.data.Store', {
            model: 'MyApp.model.PERule'  
        });

        tempStore.add(peRules);
        tempStore.sort('fromTimeHour', 'ASC');
        peRules = tempStore.getData().items;


        if(peRules){
            for(var i=0; i < peRules.length; i++){
                var peRule = peRules[i];
                if(peRule){
                    var fromTime = peRule.getFromTime().toTimeString();
                    var toTime = peRule.getToTime().toTimeString();
                    infowindow.addTab(peRule.getFormattedTimeString(fromTime) + '-' + peRule.getFormattedTimeString(toTime),this.getRuleReport(peRule));
                }  
            }
        }






        /*    
        var infowindow = new InfoBox({
        id: "infobox",
        content: tbody,
        position: startLatLng,
        disableAutoPan: false,
        maxWidth: 150,
        pixelOffset: new google.maps.Size(-140, 0),
        zIndex: null,
        boxStyle: {
        background: "url('http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/examples/tipbox.gif') no-repeat",
        opacity: 0.75,
        width: "280px"
        },
        closeBoxMargin: "12px 4px 2px 2px",
        closeBoxURL: "http://www.google.com/intl/en_us/mapfiles/close.gif",
        infoBoxClearance: new google.maps.Size(1, 1)
        });
        */


        /*
        if(ruleIdAsArray){
        for(var i=0; i < ruleIdAsArray.length; i++){
        var peRuleId = ruleIdAsArray[i];
        var peRule = peRuleDAO.getById(peRuleId);
        if(peRule){
        appliedCurrently = peRule.get('appliedCurrently');
        appliedIntheFuture = peRule.get('appliedFuture');
        if((appliedCurrently === true) || (appliedIntheFuture === true)){
        infowindow.addTab('starttime');
        }
        }  
        }
        }
        */

        google.maps.event.addListener(polyLine, 'click', function() {
            infowindow.open(actGoogMap,null);
        });

        MyApp.app.getController('MainViewController').config.createdPolyLines.push(polyLine);
        polyLine.setMap(this.getActualGoogleMap());

    },

    launch: function() {
        var senchaGoogleMap = this.getMyMap();    


        var mapOpts = {
            zoom: 19,
            center: parraCoordinates,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };


        var parraCoordinates = {
            latitude: -33.815498, 
            longitude: 151.004893
        };


        senchaGoogleMap.setMapCenter(parraCoordinates);
        senchaGoogleMap.setUseCurrentLocation(false);
        senchaGoogleMap.setMapOptions(mapOpts);


        var now = new Date();
        var nowHours = now.getHours();
        var nowMin = now.getMinutes();



        this.dynamicallyAdjustComponentSize();
        this.loadParkingData();


        window.setInterval(function(){
            MyApp.app.getController('MainViewController').refreshPESpaces();
        }, 20000);
    },

    createHours: function() {
        var data_hours = [];

        for(i=1; i<13; i++) {
            data_hours.push({
                text: i,
                value: i
            });
        } 

        return data_hours;
    },

    createMinutes: function() {
        data_minuts = [];

        data_minuts.push({
            text: '00',
            value: '00'
        });
        var val = 5;
        for(i=0; i<11; i++) {
            data_minuts.push({
                text: val,
                value: val
            });
            val = val + 5;
        }

        return data_minuts;
    },

    getTimePickerValueObj: function(sliderValue) {
        var hours = this.getHours();
        var minutes = this.getMinutes();

        var timeinDecimals = sliderValue/59;
        var minHrs = timeinDecimals.toString().split(".");

        var hoursInD = minHrs[0];
        var minInD = timeinDecimals - hoursInD;

        var hourArrayIndex = hoursInD;
        var hourPickerValue = hours[hourArrayIndex];

        var minArrayIndex = Math.floor((minInD * 59)/5);
        var minutePickerValue = minutes[minArrayIndex];

        //alert('MinArray:' + minArrayIndex);
        //alert('HourArray:' + hourArrayIndex);
        //alert('MinText:' + minutePickerValue.text);
        //alert('HourText:' + hourPickerValue.text);

        /*


        console.log('<><><><><><><><><><><><><><><><><><>');
        console.log('sliderValue' + sliderValue);
        console.log('timeinDecimals' + timeinDecimals);
        console.log('minInD' + minInD);
        console.log('minArrayIndex' + minArrayIndex);
        console.log('minutePickerValue' + minutePickerValue.text);






        console.log('<><><><><><><><><><><><><><><><><><>');
        console.log('sliderValue' + sliderValue);
        console.log('timeinDecimals' + timeinDecimals);
        console.log('hoursInD' + hoursInD);
        console.log('hourArrayIndex' + hourArrayIndex);
        console.log('hourPickerValue' + hourPickerValue.text);



        return {
        MinutePickerSlot: hourPickerValue.text
        };

        */



        /*timePicker.setValue({
        HourPickerSlot: '20',
        MinutePIckerSlot: '32' });
        */


        return {
            MinutePickerSlot: minutePickerValue.text,
        HourPickerSlot: hourPickerValue.text};
    },

    loadParkingData: function() {
        var peSpaceDAOStore = Ext.getStore('PESpaceDAO');
        //var peProxy = peSpaceDAOStore.getProxy();
        //var peSpaceProxyUrl = "http://54.200.11.164/parking-engine/PESpace/all";
        //var urlRequest = peSpaceProxyUrl;
        //peProxy.setUrl(urlRequest);





        peSpaceDAOStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.loadPERules();
            },
            scope: this
        });
        /*Accessing Information from Records:
        var mainViewController = MyApp.app.getController('MainViewController');

        for(var i=0;i<records._records.length;i++){

        var record = peStore.getAt(i);
        var id =  record.get('id');
        var startLat =  record.get('startLat');
        var startLng =  record.get('startLng');
        var endLat =  record.get('endLat');
        var endLng =  record.get('endLng');

        mainViewController.createPolyLines(startLat,startLng,endLat,endLng);

        */
    },

    refreshMap: function() {
        var peSpaceDAO = Ext.getStore('PESpaceDAO'); 
        var peRuleDAO = Ext.getStore('PERuleDAO');
        var peMeterDAO = Ext.getStore('PEMeterDAO');

        var peSpaces = peSpaceDAO.getData();
        var peRules = peRuleDAO.getData();
        var peMeters = peMeterDAO.getData();

        var mainViewController = MyApp.app.getController('MainViewController');
        var offline = 'OFFLINE';
        var online = 'REALTIME';


        for(var i=0;i<peSpaceDAO.getAllCount();i++){
            var record = peSpaceDAO.getAt(i);
            var id =  record.get('id');
            var startLat =  record.get('startLat');
            var startLng =  record.get('startLng');
            var endLat =  record.get('endLat');
            var endLng =  record.get('endLng');
            var occupied = record.get('occupied');
            var ruleIds = record.get('ruleIds');
            var ruleIdAsArray = ruleIds.split(",");
            var peRulesForPESpace = getRulesFromRuleIds(ruleIdAsArray);
            var peRepDescription = this.generateDetailsReport(peRulesForPESpace,online);
            mainViewController.createPolyLines(startLat,startLng,endLat,endLng,''+occupied+'',peRepDescription,peRulesForPESpace);
        }

        for(var m=0;m<peMeterDAO.getAllCount();m++){
            var mRecord = peMeterDAO.getAt(m);
            var mId =  mRecord.get('id');
            var mPointLat =  mRecord.get('pointLat');
            var mPointLng =  mRecord.get('pointLng');
            var mParkingSpaceIds =  mRecord.get('parkingSpaceIds');
            var mParkingRuleIds =  mRecord.get('parkingRuleIds');
            mainViewController.addMarker(mId,mPointLat,mPointLng,'SomeType Of Description');     
        }


        function getRulesFromRuleIds(ruleIdAsArray){ 
            var peRules = [];
            for(var i=0; i < ruleIdAsArray.length; i++){
                var peRuleId = ruleIdAsArray[i];
                var peRule = peRuleDAO.getById(peRuleId);
                if(peRule){
                    peRules.push(peRule); 
                }  
            }
            return peRules;
        }
    },

    loadPERules: function() {
        var peStore = Ext.getStore('PERuleDAO');
        var mainViewController = MyApp.app.getController('MainViewController');

        peStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.loadPEMeters();
            },
            scope: this
        });
        /*Accessing Information from Records:
        var mainViewController = MyApp.app.getController('MainViewController');

        for(var i=0;i<records._records.length;i++){

        MyApp.app.getController('MainViewController').peLoadedSpaces = [''];
        var record = peStore.getAt(i);
        var id =  record.get('id');
        var startLat =  record.get('startLat');
        var startLng =  record.get('startLng');
        var endLat =  record.get('endLat');
        var endLng =  record.get('endLng');

        mainViewController.createPolyLines(startLat,startLng,endLat,endLng);

        */
    },

    loadPEMeters: function() {
        var peMeterDAOStore = Ext.getStore('PEMeterDAO');
        var mainViewController = MyApp.app.getController('MainViewController');

        peMeterDAOStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.refreshMap();
            },
            scope: this
        });
    },

    dynamicallyAdjustComponentSize: function() {
        this.getTitleToolBar().setSize(window.innerWidth,getPercentage(5,window.innerHeight));
        this.getBottomToolBar().setSize(window.innerWidth,getPercentage(5,window.innerHeight));
        this.getMainViewContainer().setSize(window.innerWidth,window.innerHeight);
        this.getMyMap().setSize(getPercentage(100,window.innerWidth),getPercentage(100,window.innerHeight));
        Ext.getCmp('MapContainer').setSize(window.innerWidth,window.innerHeight);

        //var timePickerPanelWidth = getPercentage(25,window.innerWidth);
        //var timePickerPanelHeight = getPercentage(30,window.innerHeight);
        //this.getTimePickerPanel().setSize(timePickerPanelWidth,timePickerPanelHeight);

        //var timepickerHeight = timePickerPanelHeight/1.8;
        //Ext.getCmp('TimePicker').setSize(timePickerPanelWidth,timepickerHeight);
        //Ext.getCmp('HourPickerSlot').setSize(timePickerPanelWidth/3,getPercentage(90,timepickerHeight));
        //Ext.getCmp('MinutePickerSlot').setSize(timePickerPanelWidth/3,timePickerPanelHeight/1);
        //Ext.getCmp('AMPMPickerSlot').setSize(timePickerPanelWidth/3,timePickerPanelHeight/1);


        function getPercentage(percentageValue,totalSize)
        {
            return (totalSize/100)*percentageValue;
        }

    },

    refreshPESpaces: function() {
        var peSpaceDAOStore = Ext.getStore('PESpaceDAO');
        //var peProxy = peSpaceDAOStore.getProxy();
        //var peSpaceProxyUrl = "http://54.200.11.164/parking-engine/PESpace/all";
        //var urlRequest = peSpaceProxyUrl;
        //peProxy.setUrl(urlRequest);





        peSpaceDAOStore.load({
            callback: function(store, records, successful, operation, eOpts) {
                this.removePolyLinesFromMap();
                this.refreshMap();
            },
            scope: this
        });
    },

    removePolyLinesFromMap: function() {
        var existingPolyLines =  MyApp.app.getController('MainViewController').config.createdPolyLines;

        for(var i=0;i<existingPolyLines.length;i++){
            existingPolyLines[i].setMap(null);
        }

        existingPolyLines.splice(i,existingPolyLines.length);
    },

    createAMPM: function() {
        var data_AMPM = [];

        data_AMPM.push({
            text:'PM',
            value:'PM'
        });
        data_AMPM.push({
            text:'AM',
            value:'AM'
        });

        return data_AMPM;
    },

    checkAndApplyRule: function(peRule, peSpaceReport) {

        var totalRuleTimeInHours;
        var totalRuleCost;
        var endTime; 
        var startTime; 

        if(peRule.canBeAppliedCurrently(peSpaceReport)){
            endTime = peSpaceReport.getMinEndTime();
            if(peSpaceReport.getMinEndTime()>peRule.getToTime()){
                endTime = peRule.getToTime();
            }
            startTime = peSpaceReport.getStartTime();
            if(peSpaceReport.getStartTime()<peRule.getFromTime()){
                startTime = peRule.getFromTime();
            }

            totalRuleTimeInHours = (endTime - startTime)/1000/60/60;
            totalRuleCost = totalRuleTimeInHours * peRule.get('cost');
            //alert('totalRuleTimeInHours: ' + totalRuleTimeInHours);
            //alert('totalRuleCost: ' + totalRuleCost);
            peSpaceReport.addToTotalCost(totalRuleCost);
            //alert('totalReportCost: ' + peSpaceReport.get('totalCost'));

        } else if(peRule.canBeAppliedInTheFuture(peSpaceReport)){

            endTime = peSpaceReport.getMinEndTime();
            if(peSpaceReport.getMinEndTime()>peRule.getToTime()){
                endTime = peRule.getToTime();
            }

            startTime = peRule.getFromTime();
            totalRuleTimeInHours = (endTime - startTime)/1000/60/60;
            totalRuleCost = totalRuleTimeInHours * peRule.get('cost');
            //alert('totalRuleTimeInHours: ' + totalRuleTimeInHours);
            //alert('totalRuleCost: ' + totalRuleCost);
            peSpaceReport.addToTotalCost(totalRuleCost);
            //alert('totalReportCost: ' + peSpaceReport.get('totalCost'));


        }//END OF ELSE IF   
    },

    generateDetailsReport: function(peRules, mode, peRep) {

        if(mode=='REALTIME'){
            peRep = Ext.create('MyApp.model.PEReport', new Date());    
            peRep.set('startHour','16');
            peRep.set('startMinute','30');
            peRep.set('minEndHour','18');
            peRep.set('minEndMinute','30');
        }

        var ruleIds = [];

        for(var i=0; i < peRules.length; i++){
            var peRule = peRules[i];
            if(peRule){
                ruleIds.push(peRule.getId());
                this.checkAndApplyRule(peRule,peRep);  
            }  
        }


        var peRepDescription = generate_table(mode,peRep.getStartTime(),peRep.getMinEndTime(),peRep.get('dayOfWeek'),ruleIds,peRep.get('totalCost'),'test');

        function generate_table(mode,startTime,endTime,day,ids,totalCost,reNew) {
            // creates the reference for the body
            var body = document.createElement("body");

            // creates a <table> element and a <tbody> element
            var tbl     = document.createElement("table");
            var tblBody = document.createElement("tbody");
            //var br = document.createElement("br");

            createRow("Mode:",mode);
            createRow("Start ParkingTime:",String(startTime).split("GMT")[0]);
            createRow("End ParkingTime:",String(endTime).split("GMT")[0]);
            createRow("Day",day);
            createRow("RuleIds",ids);
            createRow("TotalCost",'$'+totalCost);
            createRow("Re-New Tickets",reNew);

            function createRow(lhs,rhs){
                var row=tbl.insertRow(-1);
                var cell1=row.insertCell(0);
                var cell2=row.insertCell(1);
                cell1.innerHTML=lhs;
                cell2.innerHTML=rhs;
            } 

            // put the <tbody> in the <table>
            tbl.appendChild(tblBody);
            // appends <table> into <body>
            //--> if you wanted to adda a break body.appendChild(br);
            body.appendChild(tbl);
            // sets the border attribute of tbl to 2;
            tbl.setAttribute("border", "2");
            return body;
        }


        return peRepDescription;
    },

    getRuleReport: function(peRule) {

        // creates the reference for the body
        var body = document.createElement("body");

        // creates a <table> element and a <tbody> element
        var tbl     = document.createElement("table");
        var tblBody = document.createElement("tbody");
        //var br = document.createElement("br");

        var toDay = peRule.get('toDay');
        var fromDay = peRule.get('fromDay');
        var sameDay = false;
        if(toDay === fromDay){
            sameDay = true;
        }

        /*

        if(sameDay){
        createRow("Day:",convertDayIntToString(toDay));
        } else {
        createRow("From Day:",convertDayIntToString(fromDay));
        createRow("To Day:",convertDayIntToString(toDay));
        }
        */



        createRow("StartTime:",String(peRule.getFromTime()).split('GMT')[0]);
        createRow("EndTime:",String(peRule.getToTime()).split('GMT')[0]);
        createRow("Cost/Hour","$"+peRule.get('cost'));
        createRow("Max Time Limit",peRule.get('timeLimit'));


        function createRow(lhs,rhs){
            var row=tbl.insertRow(-1);
            var cell1=row.insertCell(0);
            var cell2=row.insertCell(1);
            cell1.innerHTML=lhs;
            cell2.innerHTML=rhs;
        } 

        // put the <tbody> in the <table>
        tbl.appendChild(tblBody);
        // appends <table> into <body>
        //--> if you wanted to adda a break body.appendChild(br);
        body.appendChild(tbl);
        // sets the border attribute of tbl to 2;
        tbl.setAttribute("border", "2");
        return body;


        function convertDayIntToString(dayInt){    
            if(dayInt===0){
                return "Sunday";   
            } else if (dayInt===1){
                return "Monday";
            } else if (dayInt===2){
                return "Tuesday";
            } else if (dayInt===3){
                return "Wednesday";
            } else if (dayInt===4){
                return "Thursday";
            } else if (dayInt===5){
                return "Friday";
            } else if (dayInt===6){
                return "Saturday";
            }

        }
    }

});