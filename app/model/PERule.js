/*
 * File: app/model/PERule.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.model.PERule', {
    extend: 'Ext.data.Model',

    config: {
        fields: [
            {
                name: 'id'
            },
            {
                name: 'fromDay'
            },
            {
                name: 'toDay'
            },
            {
                name: 'cost'
            },
            {
                name: 'fromTime'
            },
            {
                name: 'toTime'
            },
            {
                name: 'timeLimit'
            },
            {
                name: 'appliedCurrently'
            },
            {
                name: 'appliedFuture'
            },
            {
                convert: function(v, rec) {
                    return rec.get('fromTime').split(':')[0] - 0;

                },
                name: 'fromTimeHour',
                type: 'int'
            }
        ]
    },

    canBeAppliedCurrently: function(reportObject) {
        var result = false;
        var peRuleStartTime = this.getFromTime();
        var peRuleEndTime = this.getToTime();  
        var reportStartTime = reportObject.getStartTime();
        var reportMinEndTime = reportObject.getMinEndTime();
        var validTimes = (peRuleStartTime && peRuleEndTime && reportStartTime);

        var validDay = this.validDay(reportObject.get('dayOfWeek'));

        //All Times
        if(reportMinEndTime === 0 && validDay){
            this.set('appliedCurrently',true);
            return true;   
        }

        if(validTimes && validDay){
            if((reportStartTime >= peRuleStartTime) && (reportStartTime < peRuleEndTime)){
                //alert('PE Rule can be applied');
                this.set('appliedCurrently',true);
                return true;   
            }
        }    



        return result;
    },

    canBeAppliedInTheFuture: function(reportObject) {
        var result = false;
        var peRuleStartTime = this.getFromTime();
        var reportStartTime = reportObject.getStartTime();
        var reportMinEndTime = reportObject.getMinEndTime();
        var validTimes = (peRuleStartTime && reportStartTime && reportMinEndTime);

        var validDay = this.validDay(reportObject.get('dayOfWeek'));

        //All Times
        if((reportMinEndTime === 0)&& validDay){
            this.set('appliedCurrently',true);
            return true;   
        }


        if(validTimes && validDay){
            if((peRuleStartTime>reportStartTime) && (reportMinEndTime>peRuleStartTime)){
                //alert('PE Rule can be applied in the Future');
                this.set('appliedFuture', true);
                return true;   
            }
        }

        return result;
    },

    parseTime: function(timeString) {
        var timeRegex = /(\d\d?):(\d\d)/;
        var today = new Date();  
        var match = timeRegex.exec(timeString);
        if(!match) return null;
        var hours = match[1]-0; 
        var minutes =  match[2]-0;
        return new Date(today.getFullYear(), today.getMonth(),today.getDate(),hours,minutes); 

    },

    getToTime: function() {
        return this.parseTime(this.get('toTime'));
    },

    getFromTime: function() {
        return this.parseTime(this.get('fromTime'));
    },

    getFormattedTimeString: function(toTimeString) {
        var timeStringArray = toTimeString.split(":");
        var timeFormatted = timeStringArray[0] + ":" + timeStringArray[1];
        return timeFormatted;
    },

    validDay: function(peReportDayAsInt) {
        var validDay = false;

        var peFromDayAsInt =  MyApp.app.getController('MainViewController').convertDayStringToInt(this.get('fromDay'));
        var peToDayAsInt =  MyApp.app.getController('MainViewController').convertDayStringToInt(this.get('toDay'));


        if(peReportDayAsInt>=peFromDayAsInt && peReportDayAsInt<=peToDayAsInt){
            validDay = true;
        }

        //SpecialCase for SUNDAY: Since rules will generally be written Mon-Sunday or Sat-Sunday
        if(peReportDayAsInt===0 &&(peReportDayAsInt===peToDayAsInt)){
            validDay = true;
        }

        return validDay;
    }

});