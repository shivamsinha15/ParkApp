{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "setTime": "silderValue",
        "createdPolyLines": [
            "[]"
        ],
        "designer|userClassName": "MainViewController"
    },
    "configAlternates": {
        "createdPolyLines": "array"
    },
    "designerId": "002e032a-bf86-4e30-b5a8-6341878c03a9",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "setTime",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "peLoadedSpaces",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "peLoadedRules",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "createdPolyLines",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "streetParkingPanel",
                "selector": "#StreetParkingPanel"
            },
            "designerId": "61f9c738-49b1-416c-9472-7cce4ab52b80"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCurrentLocationTap",
                "implHandler": [
                    "alert(\"Current Location\");",
                    "var senchaGoogleMap = this.getMyMap();",
                    "senchaGoogleMap.setUseCurrentLocation(true);"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "[action=currentLocationButton]"
            },
            "designerId": "d4d9159c-d320-43c5-b7ca-0215c2c7dad4"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "timeSlider",
                "selector": "#TimeSlider"
            },
            "designerId": "6cdb30c5-2f84-4ac3-b406-83777c6ca547"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainViewContainer",
                "selector": "#MainViewContainer"
            },
            "designerId": "e05d66fb-9b9b-42fb-bc5c-f8191dfb7be4"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "bottomToolBar",
                "selector": "#BottomToolBar"
            },
            "designerId": "41484f7f-aba0-45b6-9077-4ccc6809a41b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSearchLocationTap",
                "implHandler": [
                    "",
                    "this.getMainViewContainer().animateActiveItem(1, {type: \"slide\", direction: \"left\"});",
                    "Ext.getStore('MyDirectStore').load();",
                    "this.getBackButton().show();"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "[action=searchLocationButtonEvent]"
            },
            "designerId": "e6727e49-3603-4491-b7e7-b0e825867f38"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "backButton",
                "selector": "#BackButton"
            },
            "designerId": "d02746f7-7e3d-440d-a48c-a82975ca52e3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBackButtonTap",
                "implHandler": [
                    "",
                    "this.getMainViewContainer().animateActiveItem(0, {type: \"slide\", direction: \"right\"});",
                    "this.getBackButton().hide();",
                    "",
                    ""
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "[action=backButtonEvent]"
            },
            "designerId": "2e80d01b-2715-444c-b29c-f7f57421e44a"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "daySelectorButton",
                "selector": "#DaySelectorButton"
            },
            "designerId": "6f0e0590-c44b-422f-94f5-adb672ec6c22"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "searchLocationField",
                "selector": "#SearchLocationField"
            },
            "designerId": "60e3a331-0a7d-4b22-968f-1a248a852308"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onListItemSingletap",
                "implHandler": [
                    "this.getMainViewContainer().animateActiveItem(0, {type: \"slide\", direction: \"right\"});",
                    "this.getBackButton().hide();",
                    "var senchaGoogleMap = this.getMyMap();",
                    "senchaGoogleMap.setUseCurrentLocation(false);",
                    "",
                    "var lat = record.get('lat');",
                    "var lng = record.get('lng');    ",
                    "",
                    "var coordinates = {",
                    "    latitude: lat, ",
                    "    longitude: lng",
                    "};",
                    "",
                    "",
                    "senchaGoogleMap.setMapCenter(coordinates);",
                    "",
                    "var mapOpts = {",
                    "    zoom: 18        ",
                    "};",
                    "",
                    "senchaGoogleMap.setMapOptions(mapOpts);",
                    "var actualGoogleMap = this.getActualGoogleMap();//senchaGoogleMap.getMap();",
                    "",
                    "",
                    "var myLatlng = new google.maps.LatLng(-33.817924,151.003346);",
                    "",
                    "",
                    "",
                    "",
                    "this.createMarkers();",
                    "this.createPolyLines();",
                    "",
                    "",
                    "/* This shit works",
                    "marker2Content = '<div style=\"width:450px; line-height:9px; font:Arial, Helvetica, sans-serif small; margin:0px; padding:0px;\"><br /><strong>Meter Number:</strong> AI01 - 1 spaces<br /><br /><span style=\"color:#333;\">Church & Aird Streets Parramatta</span> <br /><br /><span style=\"font-size:11px;\">Monday to Friday: 8am - 6pm - 30min P - $1.60 Per half hour : : 6pm - 10pm - 4P - $1.10 Per hour</span><br /><br /><span style=\"font-size:11px;\">Saturday: 8am - 4pm - 30min P - $0.50 Per Half hour : : 4pm - 10pm - 4P - $1.10 Per hour</span> <br /><br /><strong>Other Parking restrictions</strong><br /><br /><span style=\"font-size:11px;\">Disabled Parking: 2 Hour Parking Mon-Fri (8am - 6pm) Sat(8am - 4pm)<br /><br /> 15 Minutes Free Meter Parking <br /><br /> </span><br /></div>';",
                    "",
                    "marker2.info  = new google.maps.InfoWindow({",
                    "content: marker2Content",
                    "});",
                    "",
                    "google.maps.event.addListener(marker2, 'click', function() {",
                    "marker2.info.open(actualGoogleMap, marker2);",
                    "});",
                    "*/",
                    "",
                    "",
                    "",
                    "/*",
                    "",
                    "Example of a static marker:",
                    "",
                    "var marker2 = new google.maps.Marker({",
                    "position: myLatlng,",
                    "map: actualGoogleMap,",
                    "title:\"Hello World!\"",
                    "});",
                    "",
                    "",
                    "Map Events:",
                    "https://developers.google.com/maps/documentation/javascript/events?hl=en",
                    "Need to add Info windows:",
                    "https://developers.google.com/maps/documentation/javascript/overlays#InfoWindows",
                    "",
                    "",
                    "Click To Add Markers:",
                    "google.maps.event.addListener(actualGoogleMap, 'click', function(event) {",
                    "addMarker(event.latLng);",
                    "});",
                    "",
                    "*/"
                ],
                "name": "itemsingletap",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "[action=addressListEvent]"
            },
            "designerId": "e25b5a96-d86e-4146-ae20-7628610bfa7a"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "myMap",
                "selector": "#MyMap"
            },
            "designerId": "d8b363cf-78af-44a5-a72d-a4ca40c12f0d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "weekDay",
                "selector": "#Weekday"
            },
            "designerId": "3da0b5c8-c747-41c2-97a0-d6eacf179b3e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "daySelectorPanel",
                "selector": "#DaySelectorPanel"
            },
            "designerId": "5706d7c6-1115-4e53-a106-947391925b1b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "weekEnd",
                "selector": "#Weekend"
            },
            "designerId": "4e4b5a56-b9eb-4a49-87c3-ac9ee82096f7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "timePicker",
                "selector": "#TimePicker"
            },
            "designerId": "9671d8f9-400e-4d9f-bbfc-48b8468e65b0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "timePickerPanel",
                "selector": "#TimePickerPanel"
            },
            "designerId": "ba032aa8-0dfa-42aa-9186-cf2af7f40db9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addMarker",
                "designer|params": [
                    "name",
                    "latitude",
                    "longitude",
                    "description"
                ],
                "implHandler": [
                    "var myIcon = {",
                    "    url: \"http://127.0.0.1/resources/img/parking-meter-export.png\"",
                    "};",
                    "",
                    "var marker = new google.maps.Marker({",
                    "    position: new google.maps.LatLng(latitude,longitude),",
                    "    icon: myIcon,",
                    "    map: this.getActualGoogleMap(),",
                    "    clickable: true",
                    "});",
                    "",
                    "",
                    "marker.info = new google.maps.InfoWindow({",
                    "    content: description ",
                    "});",
                    "",
                    "",
                    "new google.maps.event.addListener(marker, 'click', function() {",
                    "    marker.info.open(marker.map, marker);",
                    "});",
                    "",
                    "",
                    "",
                    "/* Adding markers to a map ",
                    "",
                    "ParraCity ",
                    "- http://www.parracity.nsw.gov.au/live/my_home/parking__and__transport/parking",
                    "- http://www.parracity.nsw.gov.au/__data/asset_types/google_map/js/map_lib.js",
                    "http://stackoverflow.com/questions/10132625/google-maps-marker-and-sencha-touch-2",
                    "",
                    "",
                    "*/",
                    "",
                    ""
                ]
            },
            "designerId": "e306006c-d349-4d4b-ad60-27a18fd6999b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getActualGoogleMap",
                "implHandler": [
                    "/*",
                    "this.getMyMap().getMap();",
                    "Not using this, because it has a chance of being called from onload from the datastore ",
                    "",
                    "*/",
                    "return  Ext.getCmp('MyMap').getMap();",
                    "",
                    ""
                ]
            },
            "designerId": "9d3d94ce-556a-410c-8e6b-53ddbfeeb8f9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createPolyLines",
                "designer|params": [
                    "startLat",
                    "startLng",
                    "endLat",
                    "endLng",
                    "occupied",
                    "peReport",
                    "peRules"
                ],
                "implHandler": [
                    "var startLatLng = new google.maps.LatLng(startLat,startLng);",
                    "",
                    "",
                    "var polyLineCo = [ ",
                    "startLatLng,",
                    "new google.maps.LatLng(endLat,endLng)",
                    "];",
                    "",
                    "var strokeColor = \"#009933\";",
                    "if(occupied === 'true'){",
                    "    strokeColor = \"#FF0000\";",
                    "}",
                    "",
                    "var lineSymbol = {",
                    "    path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW",
                    "};",
                    "",
                    "var polyLine = new google.maps.Polyline({",
                    "    path: polyLineCo,",
                    "    strokeColor: strokeColor,",
                    "    strokeOpacity: 1.0,",
                    "    strokeWeight: 4,",
                    "    icons: [{",
                    "        //icon:'http://mapicons.nicolasmollet.com/wp-content/uploads/mapicons/shape-default/color-1f92de/shapecolor-color/shadow-1/border-dark/symbolstyle-white/symbolshadowstyle-dark/gradient-no/car.png'",
                    "    }]",
                    "});",
                    "",
                    "",
                    "var actGoogMap = this.getActualGoogleMap();",
                    "var tbody = peReport.innerHTML;",
                    "var infowindow = new InfoBubble({",
                    "    position: startLatLng,",
                    "    maxWidth: 80,",
                    "    maxHeight: 150",
                    "});",
                    "",
                    "infowindow.addTab('Details',tbody);",
                    "",
                    "var tempStore = Ext.create('Ext.data.Store', {",
                    "        model: 'MyApp.model.PERule'  ",
                    "\t\t});",
                    "",
                    "tempStore.add(peRules);",
                    "tempStore.sort('fromTimeHour', 'ASC');",
                    "peRules = tempStore.getData().items;",
                    "",
                    "",
                    "if(peRules){",
                    "    for(var i=0; i < peRules.length; i++){",
                    "\t\tvar peRule = peRules[i];",
                    "\t\tif(peRule){",
                    "\t\t\tvar fromTime = peRule.getFromTime().toTimeString();",
                    "            var toTime = peRule.getToTime().toTimeString();",
                    "            infowindow.addTab(peRule.getFormattedTimeString(fromTime) + '-' + peRule.getFormattedTimeString(toTime),this.getRuleReport(peRule));",
                    "\t\t}  ",
                    "\t}",
                    "}",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "/*    ",
                    "var infowindow = new InfoBox({",
                    "id: \"infobox\",",
                    "content: tbody,",
                    "position: startLatLng,",
                    "disableAutoPan: false,",
                    "maxWidth: 150,",
                    "pixelOffset: new google.maps.Size(-140, 0),",
                    "zIndex: null,",
                    "boxStyle: {",
                    "background: \"url('http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/examples/tipbox.gif') no-repeat\",",
                    "opacity: 0.75,",
                    "width: \"280px\"",
                    "},",
                    "closeBoxMargin: \"12px 4px 2px 2px\",",
                    "closeBoxURL: \"http://www.google.com/intl/en_us/mapfiles/close.gif\",",
                    "infoBoxClearance: new google.maps.Size(1, 1)",
                    "});",
                    "*/",
                    "",
                    "",
                    "/*",
                    "if(ruleIdAsArray){",
                    "for(var i=0; i < ruleIdAsArray.length; i++){",
                    "var peRuleId = ruleIdAsArray[i];",
                    "var peRule = peRuleDAO.getById(peRuleId);",
                    "if(peRule){",
                    "appliedCurrently = peRule.get('appliedCurrently');",
                    "appliedIntheFuture = peRule.get('appliedFuture');",
                    "if((appliedCurrently === true) || (appliedIntheFuture === true)){",
                    "infowindow.addTab('starttime');",
                    "}",
                    "}  ",
                    "}",
                    "}",
                    "*/",
                    "",
                    "google.maps.event.addListener(polyLine, 'click', function() {",
                    "    infowindow.open(actGoogMap,null);",
                    "});",
                    "",
                    "MyApp.app.getController('MainViewController').config.createdPolyLines.push(polyLine);",
                    "polyLine.setMap(this.getActualGoogleMap());",
                    ""
                ]
            },
            "designerId": "09a8f924-51db-46ff-a20c-938098ebcbeb"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "var senchaGoogleMap = this.getMyMap();    ",
                    "",
                    "",
                    "var mapOpts = {",
                    "    zoom: 19,",
                    "    center: parraCoordinates,",
                    "    mapTypeId: google.maps.MapTypeId.ROADMAP",
                    "};",
                    "",
                    "",
                    "var parraCoordinates = {",
                    "    latitude: -33.815498, ",
                    "    longitude: 151.004893",
                    "};",
                    "",
                    "",
                    "senchaGoogleMap.setMapCenter(parraCoordinates);",
                    "senchaGoogleMap.setUseCurrentLocation(false);",
                    "senchaGoogleMap.setMapOptions(mapOpts);",
                    "",
                    "",
                    "var now = new Date();",
                    "var nowHours = now.getHours();",
                    "var nowMin = now.getMinutes();",
                    "",
                    "",
                    "",
                    "this.dynamicallyAdjustComponentSize();",
                    "this.loadParkingData();",
                    "",
                    "",
                    "window.setInterval(function(){",
                    "    MyApp.app.getController('MainViewController').refreshPESpaces();",
                    "}, 20000);"
                ]
            },
            "designerId": "0bdd7516-0f22-42b5-8cff-68d147b17aaf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onWeekdayCheckboxfieldCheck",
                "implHandler": [
                    "var weekEndCheckBox = this.getWeekEnd();",
                    "",
                    "if(weekEndCheckBox.isChecked()){",
                    "    weekEndCheckBox.uncheck();",
                    "} "
                ],
                "name": "check",
                "designer|targetType": "Ext.field.Checkbox",
                "designer|controlQuery": "[action=weekDayCheckBox]"
            },
            "designerId": "512d071d-27ae-4b64-969d-e45b46bb3dce"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onWeekendCheckboxfieldCheck",
                "implHandler": [
                    "var weekDayCheckBox = this.getWeekDay();",
                    "",
                    "if(weekDayCheckBox.isChecked()){",
                    "    weekDayCheckBox.uncheck();",
                    "} "
                ],
                "name": "check",
                "designer|targetType": "Ext.field.Checkbox",
                "designer|controlQuery": "[action=weekEndCheckBox]"
            },
            "designerId": "fc326a22-14d5-45f0-ac68-228d64d73190"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onWeekdayCheckboxfieldUncheck",
                "implHandler": [
                    "var weekEndCheckBox = this.getWeekEnd();",
                    "",
                    "if(!weekEndCheckBox.isChecked()){",
                    "    weekEndCheckBox.check();",
                    "} "
                ],
                "name": "uncheck",
                "designer|targetType": "Ext.field.Checkbox",
                "designer|controlQuery": "[action=weekDayCheckBox]"
            },
            "designerId": "efd23953-c9f9-425d-8186-69bc28bac2a5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onWeekendCheckboxfieldUncheck",
                "implHandler": [
                    "var weekDayCheckBox = this.getWeekDay();",
                    "",
                    "if(!weekDayCheckBox.isChecked()){",
                    "    weekDayCheckBox.check();",
                    "} "
                ],
                "name": "uncheck",
                "designer|targetType": "Ext.field.Checkbox",
                "designer|controlQuery": "[action=weekEndCheckBox]"
            },
            "designerId": "e87b6e84-1665-4799-b620-d4cbb6e73f1b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSliderfieldDrag",
                "implHandler": [
                    "var timePickerPanel = this.getTimePickerPanel();",
                    "var hideAnimation =  {    ",
                    "    type: 'slide',",
                    "    direction: 'up',",
                    "    duration: 300",
                    "};           ",
                    "",
                    "timePickerPanel.showBy(thumb);",
                    "var timePickerValObj = this.getTimePickerValueObj(sliderfield.getValue());",
                    "",
                    "var timePicker = this.getTimePicker();",
                    "",
                    "/*timePicker.setValue({",
                    "HourPickerSlot: '20',",
                    "MinutePIckerSlot: '32' });",
                    "*/",
                    "",
                    "",
                    "timePicker.setValue(timePickerValObj);",
                    "",
                    "Ext.Anim.run(timePickerPanel, 'fade', {",
                    "    duration: 10000,",
                    "    easing: 'ease-out'",
                    "});",
                    "",
                    "var task = Ext.create('Ext.util.DelayedTask', function() {",
                    "    timePickerPanel.hide();",
                    "});",
                    "task.delay(10000);",
                    "",
                    "",
                    ""
                ],
                "name": "drag",
                "designer|targetType": "Ext.field.Slider",
                "designer|controlQuery": "sliderfield"
            },
            "designerId": "9e5d11ee-ddd3-49de-9901-2f39f9bb7c08"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createHours",
                "implHandler": [
                    "var data_hours = [];",
                    "",
                    "   for(i=1; i<13; i++) {",
                    "      data_hours.push({",
                    "        text: i,",
                    "        value: i",
                    "      });",
                    "    } ",
                    "",
                    "return data_hours;"
                ]
            },
            "designerId": "9b9b3213-9931-44fe-92a4-2b90215d5375"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createMinutes",
                "implHandler": [
                    "data_minuts = [];",
                    "",
                    "data_minuts.push({",
                    "      text: '00',",
                    "      value: '00'",
                    "    });",
                    "    var val = 5;",
                    "    for(i=0; i<11; i++) {",
                    "      data_minuts.push({",
                    "        text: val,",
                    "        value: val",
                    "      });",
                    "      val = val + 5;",
                    "    }",
                    "",
                    "return data_minuts;"
                ]
            },
            "designerId": "9b53ef1d-3118-4eee-9dbe-501807eb0a10"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "hourPickerSlot",
                "selector": "#HourPickerSlot"
            },
            "designerId": "14314857-0878-4bf1-8985-36b87463bb7a"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "minutePickerSlot",
                "selector": "#MinutePickerSlot"
            },
            "designerId": "3e1d7ffc-a9b7-44e9-8ab9-87d7c915b32f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTimePickerValueObj",
                "designer|params": [
                    "sliderValue"
                ],
                "implHandler": [
                    "var hours = this.getHours();",
                    "var minutes = this.getMinutes();",
                    "",
                    "var timeinDecimals = sliderValue/59;",
                    "var minHrs = timeinDecimals.toString().split(\".\");",
                    "",
                    "var hoursInD = minHrs[0];",
                    "var minInD = timeinDecimals - hoursInD;",
                    "",
                    "var hourArrayIndex = hoursInD;",
                    "var hourPickerValue = hours[hourArrayIndex];",
                    "",
                    "var minArrayIndex = Math.floor((minInD * 59)/5);",
                    "var minutePickerValue = minutes[minArrayIndex];",
                    "",
                    "//alert('MinArray:' + minArrayIndex);",
                    "//alert('HourArray:' + hourArrayIndex);",
                    "//alert('MinText:' + minutePickerValue.text);",
                    "//alert('HourText:' + hourPickerValue.text);",
                    "",
                    "/*",
                    "",
                    "",
                    "console.log('<><><><><><><><><><><><><><><><><><>');",
                    "console.log('sliderValue' + sliderValue);",
                    "console.log('timeinDecimals' + timeinDecimals);",
                    "console.log('minInD' + minInD);",
                    "console.log('minArrayIndex' + minArrayIndex);",
                    "console.log('minutePickerValue' + minutePickerValue.text);",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "console.log('<><><><><><><><><><><><><><><><><><>');",
                    "console.log('sliderValue' + sliderValue);",
                    "console.log('timeinDecimals' + timeinDecimals);",
                    "console.log('hoursInD' + hoursInD);",
                    "console.log('hourArrayIndex' + hourArrayIndex);",
                    "console.log('hourPickerValue' + hourPickerValue.text);",
                    "",
                    "",
                    "",
                    "return {",
                    "MinutePickerSlot: hourPickerValue.text",
                    "};",
                    "",
                    "*/",
                    "",
                    "",
                    "",
                    "/*timePicker.setValue({",
                    "HourPickerSlot: '20',",
                    "MinutePIckerSlot: '32' });",
                    "*/",
                    "",
                    "",
                    "return {",
                    "    MinutePickerSlot: minutePickerValue.text,",
                    "HourPickerSlot: hourPickerValue.text};"
                ]
            },
            "designerId": "1b94260f-0aa8-4cee-af2d-fcdc12720c3a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadParkingData",
                "implHandler": [
                    "var peSpaceDAOStore = Ext.getStore('PESpaceDAO');",
                    "//var peProxy = peSpaceDAOStore.getProxy();",
                    "//var peSpaceProxyUrl = \"http://54.200.11.164/parking-engine/PESpace/all\";",
                    "//var urlRequest = peSpaceProxyUrl;",
                    "//peProxy.setUrl(urlRequest);",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "peSpaceDAOStore.load({",
                    "    callback: function(store, records, successful, operation, eOpts) {",
                    "        this.loadPERules();",
                    "    },",
                    "    scope: this",
                    "});",
                    "/*Accessing Information from Records:",
                    "var mainViewController = MyApp.app.getController('MainViewController');",
                    "",
                    "for(var i=0;i<records._records.length;i++){",
                    "",
                    "var record = peStore.getAt(i);",
                    "var id =  record.get('id');",
                    "var startLat =  record.get('startLat');",
                    "var startLng =  record.get('startLng');",
                    "var endLat =  record.get('endLat');",
                    "var endLng =  record.get('endLng');",
                    "",
                    "mainViewController.createPolyLines(startLat,startLng,endLat,endLng);",
                    "",
                    "*/"
                ]
            },
            "designerId": "9bbea6ec-dbfa-42e0-a553-fbb7330531a9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "refreshMap",
                "implHandler": [
                    "var peSpaceDAO = Ext.getStore('PESpaceDAO'); ",
                    "var peRuleDAO = Ext.getStore('PERuleDAO');",
                    "var peMeterDAO = Ext.getStore('PEMeterDAO');",
                    "",
                    "var peSpaces = peSpaceDAO.getData();",
                    "var peRules = peRuleDAO.getData();",
                    "var peMeters = peMeterDAO.getData();",
                    "",
                    "var mainViewController = MyApp.app.getController('MainViewController');",
                    "var offline = 'OFFLINE';",
                    "var online = 'REALTIME';",
                    "",
                    "",
                    "for(var i=0;i<peSpaceDAO.getAllCount();i++){",
                    "    var record = peSpaceDAO.getAt(i);",
                    "    var id =  record.get('id');",
                    "    var startLat =  record.get('startLat');",
                    "    var startLng =  record.get('startLng');",
                    "    var endLat =  record.get('endLat');",
                    "    var endLng =  record.get('endLng');",
                    "    var occupied = record.get('occupied');",
                    "    var ruleIds = record.get('ruleIds');",
                    "    var ruleIdAsArray = ruleIds.split(\",\");",
                    "    var peRulesForPESpace = getRulesFromRuleIds(ruleIdAsArray);",
                    "    var peRepDescription = this.generateDetailsReport(peRulesForPESpace,online);",
                    "    mainViewController.createPolyLines(startLat,startLng,endLat,endLng,''+occupied+'',peRepDescription,peRulesForPESpace);",
                    "}",
                    "",
                    "for(var m=0;m<peMeterDAO.getAllCount();m++){",
                    "    var mRecord = peMeterDAO.getAt(m);",
                    "    var mId =  mRecord.get('id');",
                    "    var mPointLat =  mRecord.get('pointLat');",
                    "    var mPointLng =  mRecord.get('pointLng');",
                    "    var mParkingSpaceIds =  mRecord.get('parkingSpaceIds');",
                    "    var mParkingRuleIds =  mRecord.get('parkingRuleIds');",
                    "    mainViewController.addMarker(mId,mPointLat,mPointLng,'SomeType Of Description');     ",
                    "}",
                    "",
                    "",
                    "function getRulesFromRuleIds(ruleIdAsArray){ ",
                    "    var peRules = [];",
                    "\tfor(var i=0; i < ruleIdAsArray.length; i++){",
                    "\t\tvar peRuleId = ruleIdAsArray[i];",
                    "\t\tvar peRule = peRuleDAO.getById(peRuleId);",
                    "\t\tif(peRule){",
                    "\t\t\tpeRules.push(peRule); ",
                    "\t\t}  ",
                    "\t}",
                    "\treturn peRules;",
                    "}"
                ]
            },
            "designerId": "b8197f28-0106-4c8f-920a-3ea231628706"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadPERules",
                "implHandler": [
                    "var peStore = Ext.getStore('PERuleDAO');",
                    "var mainViewController = MyApp.app.getController('MainViewController');",
                    "",
                    "peStore.load({",
                    "    callback: function(store, records, successful, operation, eOpts) {",
                    "        this.loadPEMeters();",
                    "    },",
                    "    scope: this",
                    "});",
                    "/*Accessing Information from Records:",
                    "var mainViewController = MyApp.app.getController('MainViewController');",
                    "",
                    "for(var i=0;i<records._records.length;i++){",
                    "",
                    "MyApp.app.getController('MainViewController').peLoadedSpaces = [''];",
                    "var record = peStore.getAt(i);",
                    "var id =  record.get('id');",
                    "var startLat =  record.get('startLat');",
                    "var startLng =  record.get('startLng');",
                    "var endLat =  record.get('endLat');",
                    "var endLng =  record.get('endLng');",
                    "",
                    "mainViewController.createPolyLines(startLat,startLng,endLat,endLng);",
                    "",
                    "*/"
                ]
            },
            "designerId": "f9f7488f-a811-43e4-a9b6-6297f6e7cb07"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadPEMeters",
                "implHandler": [
                    "var peMeterDAOStore = Ext.getStore('PEMeterDAO');",
                    "var mainViewController = MyApp.app.getController('MainViewController');",
                    "",
                    "peMeterDAOStore.load({",
                    "    callback: function(store, records, successful, operation, eOpts) {",
                    "        this.refreshMap();",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "designerId": "b3993e77-aad6-40fc-ad4b-03db30f7235c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "dynamicallyAdjustComponentSize",
                "implHandler": [
                    "this.getTitleToolBar().setSize(window.innerWidth,getPercentage(5,window.innerHeight));",
                    "this.getBottomToolBar().setSize(window.innerWidth,getPercentage(5,window.innerHeight));",
                    "this.getMainViewContainer().setSize(window.innerWidth,window.innerHeight);",
                    "this.getMyMap().setSize(getPercentage(100,window.innerWidth),getPercentage(100,window.innerHeight));",
                    "Ext.getCmp('MapContainer').setSize(window.innerWidth,window.innerHeight);",
                    "",
                    "//var timePickerPanelWidth = getPercentage(25,window.innerWidth);",
                    "//var timePickerPanelHeight = getPercentage(30,window.innerHeight);",
                    "//this.getTimePickerPanel().setSize(timePickerPanelWidth,timePickerPanelHeight);",
                    "",
                    "//var timepickerHeight = timePickerPanelHeight/1.8;",
                    "//Ext.getCmp('TimePicker').setSize(timePickerPanelWidth,timepickerHeight);",
                    "//Ext.getCmp('HourPickerSlot').setSize(timePickerPanelWidth/3,getPercentage(90,timepickerHeight));",
                    "//Ext.getCmp('MinutePickerSlot').setSize(timePickerPanelWidth/3,timePickerPanelHeight/1);",
                    "//Ext.getCmp('AMPMPickerSlot').setSize(timePickerPanelWidth/3,timePickerPanelHeight/1);",
                    "",
                    "",
                    "function getPercentage(percentageValue,totalSize)",
                    "{",
                    "    return (totalSize/100)*percentageValue;",
                    "}",
                    ""
                ]
            },
            "designerId": "bfef5624-0963-4de2-b91f-27399743db98"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "titleToolBar",
                "selector": "#TitleToolBar"
            },
            "designerId": "abc80c8d-a71a-4080-b19b-031088caefee"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "refreshPESpaces",
                "implHandler": [
                    "var peSpaceDAOStore = Ext.getStore('PESpaceDAO');",
                    "//var peProxy = peSpaceDAOStore.getProxy();",
                    "//var peSpaceProxyUrl = \"http://54.200.11.164/parking-engine/PESpace/all\";",
                    "//var urlRequest = peSpaceProxyUrl;",
                    "//peProxy.setUrl(urlRequest);",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "peSpaceDAOStore.load({",
                    "    callback: function(store, records, successful, operation, eOpts) {",
                    "        this.removePolyLinesFromMap();",
                    "        this.refreshMap();",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "designerId": "a1a81c97-45a3-414b-800c-a41bc7f86f71"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "removePolyLinesFromMap",
                "implHandler": [
                    "var existingPolyLines =  MyApp.app.getController('MainViewController').config.createdPolyLines;",
                    "",
                    "for(var i=0;i<existingPolyLines.length;i++){",
                    "    existingPolyLines[i].setMap(null);",
                    "}",
                    "",
                    "existingPolyLines.splice(i,existingPolyLines.length);"
                ]
            },
            "designerId": "f6ac52fc-342f-4402-8ef0-0404726d8226"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onTimeButtonTap",
                "implHandler": [
                    "var timePickerPanel = this.getTimePickerPanel();",
                    "",
                    "if(timePickerPanel.isHidden()){",
                    "this.getTimePickerPanel().showBy(button);",
                    "} else {",
                    "    this.getTimePickerPanel().setHidden(true);",
                    "}"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "[action=onTimeButtonTap]"
            },
            "designerId": "62d9e582-fde6-4d86-82b2-1532473c4d42"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createAMPM",
                "implHandler": [
                    "var data_AMPM = [];",
                    "",
                    "data_AMPM.push({",
                    "    text:'PM',",
                    "    value:'PM'",
                    "});",
                    "data_AMPM.push({",
                    "    text:'AM',",
                    "    value:'AM'",
                    "});",
                    "",
                    "return data_AMPM;"
                ]
            },
            "designerId": "27843e76-1273-4c26-8d23-cb2cf4f90e72"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "checkAndApplyRule",
                "designer|params": [
                    "peRule",
                    "peSpaceReport"
                ],
                "implHandler": [
                    "",
                    "var totalRuleTimeInHours;",
                    "var totalRuleCost;",
                    "var endTime; ",
                    "var startTime; ",
                    "",
                    "if(peRule.canBeAppliedCurrently(peSpaceReport)){",
                    "    endTime = peSpaceReport.getMinEndTime();",
                    "    if(peSpaceReport.getMinEndTime()>peRule.getToTime()){",
                    "        endTime = peRule.getToTime();",
                    "    }",
                    "    startTime = peSpaceReport.getStartTime();",
                    "    if(peSpaceReport.getStartTime()<peRule.getFromTime()){",
                    "        startTime = peRule.getFromTime();",
                    "    }",
                    "",
                    "    totalRuleTimeInHours = (endTime - startTime)/1000/60/60;",
                    "    totalRuleCost = totalRuleTimeInHours * peRule.get('cost');",
                    "    //alert('totalRuleTimeInHours: ' + totalRuleTimeInHours);",
                    "    //alert('totalRuleCost: ' + totalRuleCost);",
                    "    peSpaceReport.addToTotalCost(totalRuleCost);",
                    "    //alert('totalReportCost: ' + peSpaceReport.get('totalCost'));",
                    "",
                    "} else if(peRule.canBeAppliedInTheFuture(peSpaceReport)){",
                    "",
                    "    endTime = peSpaceReport.getMinEndTime();",
                    "    if(peSpaceReport.getMinEndTime()>peRule.getToTime()){",
                    "        endTime = peRule.getToTime();",
                    "    }",
                    "",
                    "    startTime = peRule.getFromTime();",
                    "    totalRuleTimeInHours = (endTime - startTime)/1000/60/60;",
                    "    totalRuleCost = totalRuleTimeInHours * peRule.get('cost');",
                    "    //alert('totalRuleTimeInHours: ' + totalRuleTimeInHours);",
                    "    //alert('totalRuleCost: ' + totalRuleCost);",
                    "    peSpaceReport.addToTotalCost(totalRuleCost);",
                    "    //alert('totalReportCost: ' + peSpaceReport.get('totalCost'));",
                    "",
                    "",
                    "}//END OF ELSE IF   "
                ]
            },
            "designerId": "9d008037-a0e4-43e3-bd78-28103b97352a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateDetailsReport",
                "designer|params": [
                    "peRules",
                    "mode",
                    "peRep"
                ],
                "implHandler": [
                    "",
                    "if(mode=='REALTIME'){",
                    "    peRep = Ext.create('MyApp.model.PEReport', new Date());    ",
                    "    peRep.set('startHour','16');",
                    "    peRep.set('startMinute','30');",
                    "    peRep.set('minEndHour','18');",
                    "    peRep.set('minEndMinute','30');",
                    "}",
                    "",
                    "var ruleIds = [];",
                    "",
                    "for(var i=0; i < peRules.length; i++){",
                    "    var peRule = peRules[i];",
                    "    if(peRule){",
                    "        ruleIds.push(peRule.getId());",
                    "        this.checkAndApplyRule(peRule,peRep);  ",
                    "    }  ",
                    "}",
                    "",
                    "",
                    "var peRepDescription = generate_table(mode,peRep.getStartTime(),peRep.getMinEndTime(),peRep.get('dayOfWeek'),ruleIds,peRep.get('totalCost'),'test');",
                    "",
                    "function generate_table(mode,startTime,endTime,day,ids,totalCost,reNew) {",
                    "    // creates the reference for the body",
                    "    var body = document.createElement(\"body\");",
                    "",
                    "    // creates a <table> element and a <tbody> element",
                    "    var tbl     = document.createElement(\"table\");",
                    "    var tblBody = document.createElement(\"tbody\");",
                    "    //var br = document.createElement(\"br\");",
                    "",
                    "    createRow(\"Mode:\",mode);",
                    "    createRow(\"Start ParkingTime:\",String(startTime).split(\"GMT\")[0]);",
                    "    createRow(\"End ParkingTime:\",String(endTime).split(\"GMT\")[0]);",
                    "    createRow(\"Day\",day);",
                    "    createRow(\"RuleIds\",ids);",
                    "    createRow(\"TotalCost\",'$'+totalCost);",
                    "    createRow(\"Re-New Tickets\",reNew);",
                    "",
                    "    function createRow(lhs,rhs){",
                    "        var row=tbl.insertRow(-1);",
                    "        var cell1=row.insertCell(0);",
                    "        var cell2=row.insertCell(1);",
                    "        cell1.innerHTML=lhs;",
                    "        cell2.innerHTML=rhs;",
                    "    } ",
                    "",
                    "    // put the <tbody> in the <table>",
                    "    tbl.appendChild(tblBody);",
                    "    // appends <table> into <body>",
                    "    //--> if you wanted to adda a break body.appendChild(br);",
                    "    body.appendChild(tbl);",
                    "    // sets the border attribute of tbl to 2;",
                    "    tbl.setAttribute(\"border\", \"2\");",
                    "    return body;",
                    "}",
                    "",
                    "",
                    "return peRepDescription;"
                ]
            },
            "designerId": "ce5fb8b5-877b-42c1-8340-111c0be89120"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getRuleReport",
                "designer|params": [
                    "peRule"
                ],
                "implHandler": [
                    "",
                    "    // creates the reference for the body",
                    "    var body = document.createElement(\"body\");",
                    "",
                    "    // creates a <table> element and a <tbody> element",
                    "    var tbl     = document.createElement(\"table\");",
                    "    var tblBody = document.createElement(\"tbody\");",
                    "    //var br = document.createElement(\"br\");",
                    "",
                    "\tvar toDay = peRule.get('toDay');",
                    "\tvar fromDay = peRule.get('fromDay');",
                    "\tvar sameDay = false;",
                    "\tif(toDay === fromDay){",
                    "         sameDay = true;",
                    "\t}",
                    "",
                    "/*",
                    "\t",
                    "\tif(sameDay){",
                    "        createRow(\"Day:\",convertDayIntToString(toDay));",
                    "\t} else {",
                    "        createRow(\"From Day:\",convertDayIntToString(fromDay));",
                    "        createRow(\"To Day:\",convertDayIntToString(toDay));",
                    "    }",
                    "*/",
                    "",
                    "\t",
                    "",
                    "    createRow(\"StartTime:\",String(peRule.getFromTime()).split('GMT')[0]);",
                    "    createRow(\"EndTime:\",String(peRule.getToTime()).split('GMT')[0]);",
                    "    createRow(\"Cost/Hour\",\"$\"+peRule.get('cost'));",
                    "    createRow(\"Max Time Limit\",peRule.get('timeLimit'));",
                    "",
                    "",
                    "    function createRow(lhs,rhs){",
                    "        var row=tbl.insertRow(-1);",
                    "        var cell1=row.insertCell(0);",
                    "        var cell2=row.insertCell(1);",
                    "        cell1.innerHTML=lhs;",
                    "        cell2.innerHTML=rhs;",
                    "    } ",
                    "",
                    "    // put the <tbody> in the <table>",
                    "    tbl.appendChild(tblBody);",
                    "    // appends <table> into <body>",
                    "    //--> if you wanted to adda a break body.appendChild(br);",
                    "    body.appendChild(tbl);",
                    "    // sets the border attribute of tbl to 2;",
                    "    tbl.setAttribute(\"border\", \"2\");",
                    "    return body;",
                    "",
                    "",
                    "function convertDayIntToString(dayInt){    ",
                    "    if(dayInt===0){",
                    "        return \"Sunday\";   ",
                    "    } else if (dayInt===1){",
                    "\t\treturn \"Monday\";",
                    "    } else if (dayInt===2){",
                    "        return \"Tuesday\";",
                    "    } else if (dayInt===3){",
                    "\t\treturn \"Wednesday\";",
                    "    } else if (dayInt===4){",
                    "\t\treturn \"Thursday\";",
                    "    } else if (dayInt===5){",
                    "\t\treturn \"Friday\";",
                    "    } else if (dayInt===6){",
                    "\t\treturn \"Saturday\";",
                    "    }",
                    "",
                    "}"
                ]
            },
            "designerId": "eb76159f-90ac-4546-814e-0aff9f8ea7fa"
        }
    ]
}